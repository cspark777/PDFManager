// Debenu Quick PDF Library
// ActiveX Edition
// Version 9.12

// Copyright © 1999 - 2012 Debenu Pty Ltd

// DebenuPDFLibraryAX0912.cpp
// C++ import header
// This file was generated by an automated process on 8 November 2012
// http://www.debenu.com/

#include "DebenuPDFLibraryAX0912.h"
#include <string>
#include <vector>
#include "windows.h"
#include "objbase.h"
#include "comdef.h"

DebenuPDFLibraryAX0912::DebenuPDFLibraryAX0912()
{
	CoInitialize(0);
	CLSID clsid;
	loaded = false;
	HRESULT hr = CLSIDFromProgID(L"DebenuPDFLibraryAX0912.PDFLibrary", &clsid);
	if (hr == S_OK)
	{
		hr = CoCreateInstance(clsid, NULL, CLSCTX_SERVER, IID_IDispatch, (void**) &pDisp);
		if (hr == S_OK)
		{
			loaded = true;
		}
	}
}

DebenuPDFLibraryAX0912::~DebenuPDFLibraryAX0912()
{
	if (loaded)
	{
		pDisp->Release();
	}
	CoUninitialize();
}

bool DebenuPDFLibraryAX0912::LibraryLoaded()
{
	return loaded;
}

std::wstring DebenuPDFLibraryAX0912::GetString()
{
	if (result.bstrVal != NULL)
	{
		return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
	} else {
		std::wstring blank;
		return blank;
	}
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetByteArray()
{
	if ((result.vt & VT_ARRAY) != VT_ARRAY)
	{
		std::vector<BYTE> v;
		return v;
	}

	SAFEARRAY * psa = result.parray;

	long lStartBound;
	long lEndBound;
	SafeArrayGetLBound(psa, 1, &lStartBound);
	SafeArrayGetUBound(psa, 1, &lEndBound);

	BYTE * arrayAccess = NULL;
	SafeArrayAccessData(psa, (void**)&arrayAccess);

	int size = lEndBound - lStartBound + 1;
	std::vector<BYTE> vec(arrayAccess, arrayAccess + size - 1);

	SafeArrayUnaccessData(psa);

	return vec;
}

VARIANT DebenuPDFLibraryAX0912::MakeByteArray(std::vector<BYTE> &vector)
{
	int vectorSize = (int)vector.size();
	VARIANT arSource;
	VariantInit(&arSource);
	SAFEARRAY * theArray;
	SAFEARRAYBOUND dim[1];
	dim[0].lLbound = 0;
	dim[0].cElements = vectorSize;
	theArray = SafeArrayCreate(VT_UI1, 1, dim);
	char * p;
	SafeArrayAccessData(theArray, (void **)&p);
	memcpy(p, &vector[0], vectorSize);
	SafeArrayUnaccessData(theArray);
	arSource.vt = VT_ARRAY | VT_UI1;
	arSource.parray = theArray;
	return arSource;
}

void DebenuPDFLibraryAX0912::RunFunction(WCHAR * functionName,
	_variant_t p1,
	_variant_t p2,
	_variant_t p3,
	_variant_t p4,
	_variant_t p5,
	_variant_t p6,
	_variant_t p7,
	_variant_t p8,
	_variant_t p9,
	_variant_t p10,
	_variant_t p11,
	_variant_t p12,
	_variant_t p13)
{
if (loaded)
	{
		DISPID dispID;
		pDisp->GetIDsOfNames(IID_NULL, &functionName, 1, LOCALE_USER_DEFAULT, &dispID);

		DISPPARAMS dp = { NULL, NULL, 0, 0 };

		dp.cArgs = 13;
		if (p13.vt == VT_ERROR) dp.cArgs = 12;
		if (p12.vt == VT_ERROR) dp.cArgs = 11;
		if (p11.vt == VT_ERROR) dp.cArgs = 10;
		if (p10.vt == VT_ERROR) dp.cArgs = 9;
		if (p9.vt == VT_ERROR) dp.cArgs = 8;
		if (p8.vt == VT_ERROR) dp.cArgs = 7;
		if (p7.vt == VT_ERROR) dp.cArgs = 6;
		if (p6.vt == VT_ERROR) dp.cArgs = 5;
		if (p5.vt == VT_ERROR) dp.cArgs = 4;
		if (p4.vt == VT_ERROR) dp.cArgs = 3;
		if (p3.vt == VT_ERROR) dp.cArgs = 2;
		if (p2.vt == VT_ERROR) dp.cArgs = 1;
		if (p1.vt == VT_ERROR) dp.cArgs = 0;

		VARIANTARG vargs[13];

		if (dp.cArgs >= 1) vargs[dp.cArgs - 1] = p1;
		if (dp.cArgs >= 2) vargs[dp.cArgs - 2] = p2;
		if (dp.cArgs >= 3) vargs[dp.cArgs - 3] = p3;
		if (dp.cArgs >= 4) vargs[dp.cArgs - 4] = p4;
		if (dp.cArgs >= 5) vargs[dp.cArgs - 5] = p5;
		if (dp.cArgs >= 6) vargs[dp.cArgs - 6] = p6;
		if (dp.cArgs >= 7) vargs[dp.cArgs - 7] = p7;
		if (dp.cArgs >= 8) vargs[dp.cArgs - 8] = p8;
		if (dp.cArgs >= 9) vargs[dp.cArgs - 9] = p9;
		if (dp.cArgs >= 10) vargs[dp.cArgs - 10] = p10;
		if (dp.cArgs >= 11) vargs[dp.cArgs - 11] = p11;
		if (dp.cArgs >= 12) vargs[dp.cArgs - 12] = p12;
		if (dp.cArgs >= 13) vargs[dp.cArgs - 13] = p13;
		if (dp.cArgs > 0) dp.rgvarg = vargs;

		unsigned int argErr = 0;
		HRESULT callResult = pDisp->Invoke(dispID, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD,
			&dp, &result, 0, &argErr);
	}
}

int DebenuPDFLibraryAX0912::AddArcToPath(double CenterX, double CenterY, double TotalAngle)
{
	RunFunction(L"AddArcToPath", CenterX, CenterY, TotalAngle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddCJKFont(int CJKFontID)
{
	RunFunction(L"AddCJKFont", CJKFontID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddCurveToPath(double CtAX, double CtAY, double CtBX, double CtBY, double EndX, double EndY)
{
	RunFunction(L"AddCurveToPath", CtAX, CtAY, CtBX, CtBY, EndX, EndY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddEmbeddedFile(const std::wstring& FileName, const std::wstring& MIMEType)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	BSTR bstrMIMEType = SysAllocStringLen(MIMEType.c_str(), (int)(MIMEType.length()));
	RunFunction(L"AddEmbeddedFile", bstrFileName, bstrMIMEType);
	SysFreeString(bstrFileName);
	SysFreeString(bstrMIMEType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddFileAttachment(const std::wstring& Title, int EmbeddedFileID)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"AddFileAttachment", bstrTitle, EmbeddedFileID);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddFormFieldChoiceSub(int Index, const std::wstring& SubName, const std::wstring& DisplayName)
{
	BSTR bstrSubName = SysAllocStringLen(SubName.c_str(), (int)(SubName.length()));
	BSTR bstrDisplayName = SysAllocStringLen(DisplayName.c_str(), (int)(DisplayName.length()));
	RunFunction(L"AddFormFieldChoiceSub", Index, bstrSubName, bstrDisplayName);
	SysFreeString(bstrSubName);
	SysFreeString(bstrDisplayName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddFormFieldSub(int Index, const std::wstring& SubName)
{
	BSTR bstrSubName = SysAllocStringLen(SubName.c_str(), (int)(SubName.length()));
	RunFunction(L"AddFormFieldSub", Index, bstrSubName);
	SysFreeString(bstrSubName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddFormFont(int FontID)
{
	RunFunction(L"AddFormFont", FontID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddGlobalJavaScript(const std::wstring& PackageName, const std::wstring& JavaScript)
{
	BSTR bstrPackageName = SysAllocStringLen(PackageName.c_str(), (int)(PackageName.length()));
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"AddGlobalJavaScript", bstrPackageName, bstrJavaScript);
	SysFreeString(bstrPackageName);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddImageFromFile(const std::wstring& FileName, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddImageFromFile", bstrFileName, Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddImageFromFileOffset(const std::wstring& FileName, int Offset, int DataLength, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddImageFromFileOffset", bstrFileName, Offset, DataLength, 
	Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddImageFromVariant(std::vector<BYTE>& SourceData, int Options)
{
	VARIANT arSourceData = MakeByteArray(SourceData);
	RunFunction(L"AddImageFromVariant", arSourceData, Options);
	SafeArrayDestroy(arSourceData.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLGIDictToPage(const std::wstring& DictContent)
{
	BSTR bstrDictContent = SysAllocStringLen(DictContent.c_str(), (int)(DictContent.length()));
	RunFunction(L"AddLGIDictToPage", bstrDictContent);
	SysFreeString(bstrDictContent);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLineToPath(double EndX, double EndY)
{
	RunFunction(L"AddLineToPath", EndX, EndY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToDestination(double Left, double Top, double Width, double Height, int DestID, int Options)
{
	RunFunction(L"AddLinkToDestination", Left, Top, Width, Height, DestID, 
	Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToEmbeddedFile(double Left, double Top, double Width, double Height, int EmbeddedFileID, const std::wstring& Title, const std::wstring& Contents, int IconType, int Transpareny)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	BSTR bstrContents = SysAllocStringLen(Contents.c_str(), (int)(Contents.length()));
	RunFunction(L"AddLinkToEmbeddedFile", Left, Top, Width, Height, 
	EmbeddedFileID, bstrTitle, bstrContents, IconType, Transpareny);
	SysFreeString(bstrTitle);
	SysFreeString(bstrContents);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToFile(double Left, double Top, double Width, double Height, const std::wstring& FileName, int Page, double Position, int NewWindow, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddLinkToFile", Left, Top, Width, Height, bstrFileName, 
	Page, Position, NewWindow, Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToJavaScript(double Left, double Top, double Width, double Height, const std::wstring& JavaScript, int Options)
{
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"AddLinkToJavaScript", Left, Top, Width, Height, bstrJavaScript, 
	Options);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToLocalFile(double Left, double Top, double Width, double Height, const std::wstring& FileName, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddLinkToLocalFile", Left, Top, Width, Height, bstrFileName, 
	Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToPage(double Left, double Top, double Width, double Height, int Page, double Position, int Options)
{
	RunFunction(L"AddLinkToPage", Left, Top, Width, Height, Page, Position, 
	Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddLinkToWeb(double Left, double Top, double Width, double Height, const std::wstring& Link, int Options)
{
	BSTR bstrLink = SysAllocStringLen(Link.c_str(), (int)(Link.length()));
	RunFunction(L"AddLinkToWeb", Left, Top, Width, Height, bstrLink, Options);
	SysFreeString(bstrLink);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddNoteAnnotation(double Left, double Top, int AnnotType, double PopupLeft, double PopupTop, double PopupWidth, double PopupHeight, const std::wstring& Title, const std::wstring& Contents, double Red, double Green, double Blue, int Open)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	BSTR bstrContents = SysAllocStringLen(Contents.c_str(), (int)(Contents.length()));
	RunFunction(L"AddNoteAnnotation", Left, Top, AnnotType, PopupLeft, 
	PopupTop, PopupWidth, PopupHeight, bstrTitle, bstrContents, Red, Green, 
	Blue, Open);
	SysFreeString(bstrTitle);
	SysFreeString(bstrContents);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddOpenTypeFontFromFile(const std::wstring& FileName, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddOpenTypeFontFromFile", bstrFileName, Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddPageLabels(int Start, int Style, int Offset, const std::wstring& Prefix)
{
	BSTR bstrPrefix = SysAllocStringLen(Prefix.c_str(), (int)(Prefix.length()));
	RunFunction(L"AddPageLabels", Start, Style, Offset, bstrPrefix);
	SysFreeString(bstrPrefix);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddSVGAnnotationFromFile(double Left, double Top, double Width, double Height, const std::wstring& FileName, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddSVGAnnotationFromFile", Left, Top, Width, Height, 
	bstrFileName, Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddSWFAnnotationFromFile(double Left, double Top, double Width, double Height, const std::wstring& FileName, const std::wstring& Title, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"AddSWFAnnotationFromFile", Left, Top, Width, Height, 
	bstrFileName, bstrTitle, Options);
	SysFreeString(bstrFileName);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddSeparationColor(const std::wstring& ColorName, double C, double M, double Y, double K, int Options)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"AddSeparationColor", bstrColorName, C, M, Y, K, Options);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddStampAnnotation(double Left, double Top, double Width, double Height, int StampType, const std::wstring& Title, const std::wstring& Contents, double Red, double Green, double Blue, int Options)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	BSTR bstrContents = SysAllocStringLen(Contents.c_str(), (int)(Contents.length()));
	RunFunction(L"AddStampAnnotation", Left, Top, Width, Height, StampType, 
	bstrTitle, bstrContents, Red, Green, Blue, Options);
	SysFreeString(bstrTitle);
	SysFreeString(bstrContents);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddStandardFont(int StandardFontID)
{
	RunFunction(L"AddStandardFont", StandardFontID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddSubsettedFont(const std::wstring& FontName, int CharsetIndex, const std::wstring& SubsetChars)
{
	BSTR bstrFontName = SysAllocStringLen(FontName.c_str(), (int)(FontName.length()));
	BSTR bstrSubsetChars = SysAllocStringLen(SubsetChars.c_str(), (int)(SubsetChars.length()));
	RunFunction(L"AddSubsettedFont", bstrFontName, CharsetIndex, bstrSubsetChars);
	SysFreeString(bstrFontName);
	SysFreeString(bstrSubsetChars);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddTextMarkupAnnotation(int MarkupType, double Left, double Top, double Width, double Height)
{
	RunFunction(L"AddTextMarkupAnnotation", MarkupType, Left, Top, Width, 
	Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddToFileList(const std::wstring& ListName, const std::wstring& FileName)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddToFileList", bstrListName, bstrFileName);
	SysFreeString(bstrListName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddTrueTypeFont(const std::wstring& FontName, int Embed)
{
	BSTR bstrFontName = SysAllocStringLen(FontName.c_str(), (int)(FontName.length()));
	RunFunction(L"AddTrueTypeFont", bstrFontName, Embed);
	SysFreeString(bstrFontName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddTrueTypeFontFromFile(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddTrueTypeFontFromFile", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddTrueTypeSubsettedFont(const std::wstring& FontName, const std::wstring& SubsetChars, int Options)
{
	BSTR bstrFontName = SysAllocStringLen(FontName.c_str(), (int)(FontName.length()));
	BSTR bstrSubsetChars = SysAllocStringLen(SubsetChars.c_str(), (int)(SubsetChars.length()));
	RunFunction(L"AddTrueTypeSubsettedFont", bstrFontName, bstrSubsetChars, 
	Options);
	SysFreeString(bstrFontName);
	SysFreeString(bstrSubsetChars);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddType1Font(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddType1Font", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AddU3DAnnotationFromFile(double Left, double Top, double Width, double Height, const std::wstring& FileName, int Options)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"AddU3DAnnotationFromFile", Left, Top, Width, Height, 
	bstrFileName, Options);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AnalyseFile(const std::wstring& InputFileName, const std::wstring& Password)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"AnalyseFile", bstrInputFileName, bstrPassword);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AnnotationCount()
{
	RunFunction(L"AnnotationCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AppendSpace(double RelativeSpace)
{
	RunFunction(L"AppendSpace", RelativeSpace);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AppendTableColumns(int TableID, int NewColumnCount)
{
	RunFunction(L"AppendTableColumns", TableID, NewColumnCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AppendTableRows(int TableID, int NewRowCount)
{
	RunFunction(L"AppendTableRows", TableID, NewRowCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AppendText(const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"AppendText", bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ApplyStyle(const std::wstring& StyleName)
{
	BSTR bstrStyleName = SysAllocStringLen(StyleName.c_str(), (int)(StyleName.length()));
	RunFunction(L"ApplyStyle", bstrStyleName);
	SysFreeString(bstrStyleName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::AttachAnnotToForm(int Index)
{
	RunFunction(L"AttachAnnotToForm", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::BalanceContentStream()
{
	RunFunction(L"BalanceContentStream");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::BeginPageUpdate()
{
	RunFunction(L"BeginPageUpdate");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CapturePage(int Page)
{
	RunFunction(L"CapturePage", Page);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CapturePageEx(int Page, int Options)
{
	RunFunction(L"CapturePageEx", Page, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CharWidth(int CharCode)
{
	RunFunction(L"CharWidth", CharCode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CheckFileCompliance(const std::wstring& InputFileName, const std::wstring& Password, int ComplianceTest, int Options)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"CheckFileCompliance", bstrInputFileName, bstrPassword, 
	ComplianceTest, Options);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CheckObjects()
{
	RunFunction(L"CheckObjects");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CheckPageAnnots()
{
	RunFunction(L"CheckPageAnnots");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClearFileList(const std::wstring& ListName)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	RunFunction(L"ClearFileList", bstrListName);
	SysFreeString(bstrListName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClearImage(int ImageID)
{
	RunFunction(L"ClearImage", ImageID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClearPageLabels()
{
	RunFunction(L"ClearPageLabels");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClearTextFormatting()
{
	RunFunction(L"ClearTextFormatting");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CloneOutlineAction(int OutlineID)
{
	RunFunction(L"CloneOutlineAction", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClonePages(int StartPage, int EndPage, int RepeatCount)
{
	RunFunction(L"ClonePages", StartPage, EndPage, RepeatCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CloseOutline(int OutlineID)
{
	RunFunction(L"CloseOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ClosePath()
{
	RunFunction(L"ClosePath");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CombineContentStreams()
{
	RunFunction(L"CombineContentStreams");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CompareOutlines(int FirstOutlineID, int SecondOutlineID)
{
	RunFunction(L"CompareOutlines", FirstOutlineID, SecondOutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CompressContent()
{
	RunFunction(L"CompressContent");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CompressFonts(int Compress)
{
	RunFunction(L"CompressFonts", Compress);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CompressImages(int Compress)
{
	RunFunction(L"CompressImages", Compress);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CompressPage()
{
	RunFunction(L"CompressPage");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ContentStreamCount()
{
	RunFunction(L"ContentStreamCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ContentStreamSafe()
{
	RunFunction(L"ContentStreamSafe");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CopyPageRanges(int DocumentID, const std::wstring& RangeList)
{
	BSTR bstrRangeList = SysAllocStringLen(RangeList.c_str(), (int)(RangeList.length()));
	RunFunction(L"CopyPageRanges", DocumentID, bstrRangeList);
	SysFreeString(bstrRangeList);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CopyPageRangesEx(int DocumentID, const std::wstring& RangeList, int Options)
{
	BSTR bstrRangeList = SysAllocStringLen(RangeList.c_str(), (int)(RangeList.length()));
	RunFunction(L"CopyPageRangesEx", DocumentID, bstrRangeList, Options);
	SysFreeString(bstrRangeList);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CreateNewObject()
{
	RunFunction(L"CreateNewObject");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::CreateTable(int RowCount, int ColumnCount)
{
	RunFunction(L"CreateTable", RowCount, ColumnCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAAppendFile(int FileHandle)
{
	RunFunction(L"DAAppendFile", FileHandle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DACapturePage(int FileHandle, int PageRef)
{
	RunFunction(L"DACapturePage", FileHandle, PageRef);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DACapturePageEx(int FileHandle, int PageRef, int Options)
{
	RunFunction(L"DACapturePageEx", FileHandle, PageRef, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DACloseFile(int FileHandle)
{
	RunFunction(L"DACloseFile", FileHandle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DADrawCapturedPage(int FileHandle, int DACaptureID, int DestPageRef, double PntLeft, double PntBottom, double PntWidth, double PntHeight)
{
	RunFunction(L"DADrawCapturedPage", FileHandle, DACaptureID, DestPageRef, 
	PntLeft, PntBottom, PntWidth, PntHeight);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DADrawRotatedCapturedPage(int FileHandle, int DACaptureID, int DestPageRef, double PntLeft, double PntBottom, double PntWidth, double PntHeight, double Angle)
{
	RunFunction(L"DADrawRotatedCapturedPage", FileHandle, DACaptureID, 
	DestPageRef, PntLeft, PntBottom, PntWidth, PntHeight, Angle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAEmbedFileStreams(int FileHandle, const std::wstring& RootPath)
{
	BSTR bstrRootPath = SysAllocStringLen(RootPath.c_str(), (int)(RootPath.length()));
	RunFunction(L"DAEmbedFileStreams", FileHandle, bstrRootPath);
	SysFreeString(bstrRootPath);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::DAExtractPageText(int FileHandle, int PageRef, int Options)
{
	RunFunction(L"DAExtractPageText", FileHandle, PageRef, Options);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::DAFindPage(int FileHandle, int Page)
{
	RunFunction(L"DAFindPage", FileHandle, Page);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAGetAnnotationCount(int FileHandle, int PageRef)
{
	RunFunction(L"DAGetAnnotationCount", FileHandle, PageRef);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAGetFormFieldCount(int FileHandle)
{
	RunFunction(L"DAGetFormFieldCount", FileHandle);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::DAGetFormFieldTitle(int FileHandle, int FieldIndex)
{
	RunFunction(L"DAGetFormFieldTitle", FileHandle, FieldIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::DAGetFormFieldValue(int FileHandle, int FieldIndex)
{
	RunFunction(L"DAGetFormFieldValue", FileHandle, FieldIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::vector<BYTE> DebenuPDFLibraryAX0912::DAGetImageDataToVariant(int FileHandle, int ImageListID, int ImageIndex)
{
	RunFunction(L"DAGetImageDataToVariant", FileHandle, ImageListID, 
	ImageIndex);
	return GetByteArray();
}

double DebenuPDFLibraryAX0912::DAGetImageDblProperty(int FileHandle, int ImageListID, int ImageIndex, int PropertyID)
{
	RunFunction(L"DAGetImageDblProperty", FileHandle, ImageListID, 
	ImageIndex, PropertyID);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::DAGetImageIntProperty(int FileHandle, int ImageListID, int ImageIndex, int PropertyID)
{
	RunFunction(L"DAGetImageIntProperty", FileHandle, ImageListID, 
	ImageIndex, PropertyID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAGetImageListCount(int FileHandle, int ImageListID)
{
	RunFunction(L"DAGetImageListCount", FileHandle, ImageListID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::DAGetInformation(int FileHandle, const std::wstring& Key)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	RunFunction(L"DAGetInformation", FileHandle, bstrKey);
	SysFreeString(bstrKey);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::DAGetObjectCount(int FileHandle)
{
	RunFunction(L"DAGetObjectCount", FileHandle);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::DAGetObjectToVariant(int FileHandle, int ObjectNumber)
{
	RunFunction(L"DAGetObjectToVariant", FileHandle, ObjectNumber);
	return GetByteArray();
}

double DebenuPDFLibraryAX0912::DAGetPageBox(int FileHandle, int PageRef, int BoxIndex, int Dimension)
{
	RunFunction(L"DAGetPageBox", FileHandle, PageRef, BoxIndex, Dimension);
	return result.dblVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::DAGetPageContentToVariant(int FileHandle, int PageRef)
{
	RunFunction(L"DAGetPageContentToVariant", FileHandle, PageRef);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::DAGetPageCount(int FileHandle)
{
	RunFunction(L"DAGetPageCount", FileHandle);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::DAGetPageHeight(int FileHandle, int PageRef)
{
	RunFunction(L"DAGetPageHeight", FileHandle, PageRef);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::DAGetPageImageList(int FileHandle, int PageRef)
{
	RunFunction(L"DAGetPageImageList", FileHandle, PageRef);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::DAGetPageWidth(int FileHandle, int PageRef)
{
	RunFunction(L"DAGetPageWidth", FileHandle, PageRef);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::DAHasPageBox(int FileHandle, int PageRef, int BoxIndex)
{
	RunFunction(L"DAHasPageBox", FileHandle, PageRef, BoxIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAHidePage(int FileHandle, int PageRef)
{
	RunFunction(L"DAHidePage", FileHandle, PageRef);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAMovePage(int FileHandle, int PageRef, int TargetPageRef, int Options)
{
	RunFunction(L"DAMovePage", FileHandle, PageRef, TargetPageRef, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DANewPage(int FileHandle)
{
	RunFunction(L"DANewPage", FileHandle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DANewPages(int FileHandle, int PageCount)
{
	RunFunction(L"DANewPages", FileHandle, PageCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAOpenFile(const std::wstring& InputFileName, const std::wstring& Password)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"DAOpenFile", bstrInputFileName, bstrPassword);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAOpenFileReadOnly(const std::wstring& InputFileName, const std::wstring& Password)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"DAOpenFileReadOnly", bstrInputFileName, bstrPassword);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAPageRotation(int FileHandle, int PageRef)
{
	RunFunction(L"DAPageRotation", FileHandle, PageRef);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DAReleaseImageList(int FileHandle, int ImageListID)
{
	RunFunction(L"DAReleaseImageList", FileHandle, ImageListID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DARemoveUsageRights(int FileHandle)
{
	RunFunction(L"DARemoveUsageRights", FileHandle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DARenderPageToDC(int FileHandle, int PageRef, int DPI, HDC DC)
{
	RunFunction(L"DARenderPageToDC", FileHandle, PageRef, DPI, (int)DC);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DARenderPageToFile(int FileHandle, int PageRef, int Options, int DPI, const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"DARenderPageToFile", FileHandle, PageRef, Options, DPI, 
	bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::DARenderPageToVariant(int FileHandle, int PageRef, int Options, int DPI)
{
	RunFunction(L"DARenderPageToVariant", FileHandle, PageRef, Options, DPI);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::DARotatePage(int FileHandle, int PageRef, int Angle, int Options)
{
	RunFunction(L"DARotatePage", FileHandle, PageRef, Angle, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASaveAsFile(int FileHandle, const std::wstring& OutputFileName)
{
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	RunFunction(L"DASaveAsFile", FileHandle, bstrOutputFileName);
	SysFreeString(bstrOutputFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASaveImageDataToFile(int FileHandle, int ImageListID, int ImageIndex, const std::wstring& ImageFileName)
{
	BSTR bstrImageFileName = SysAllocStringLen(ImageFileName.c_str(), (int)(ImageFileName.length()));
	RunFunction(L"DASaveImageDataToFile", FileHandle, ImageListID, 
	ImageIndex, bstrImageFileName);
	SysFreeString(bstrImageFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetInformation(int FileHandle, const std::wstring& Key, const std::wstring& NewValue)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"DASetInformation", FileHandle, bstrKey, bstrNewValue);
	SysFreeString(bstrKey);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetPageBox(int FileHandle, int PageRef, int BoxIndex, double X1, double Y1, double X2, double Y2)
{
	RunFunction(L"DASetPageBox", FileHandle, PageRef, BoxIndex, X1, Y1, X2, 
	Y2);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetPageSize(int FileHandle, int PageRef, double PntWidth, double PntHeight)
{
	RunFunction(L"DASetPageSize", FileHandle, PageRef, PntWidth, PntHeight);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetTextExtractionArea(double Left, double Top, double Width, double Height)
{
	RunFunction(L"DASetTextExtractionArea", Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetTextExtractionOptions(int OptionID, int NewValue)
{
	RunFunction(L"DASetTextExtractionOptions", OptionID, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetTextExtractionScaling(int Options, double Horizontal, double Vertical)
{
	RunFunction(L"DASetTextExtractionScaling", Options, Horizontal, Vertical);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DASetTextExtractionWordGap(double NewWordGap)
{
	RunFunction(L"DASetTextExtractionWordGap", NewWordGap);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::Decrypt()
{
	RunFunction(L"Decrypt");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DecryptFile(const std::wstring& InputFileName, const std::wstring& OutputFileName, const std::wstring& Password)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"DecryptFile", bstrInputFileName, bstrOutputFileName, 
	bstrPassword);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrOutputFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeleteAnalysis(int AnalysisID)
{
	RunFunction(L"DeleteAnalysis", AnalysisID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeleteAnnotation(int Index)
{
	RunFunction(L"DeleteAnnotation", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeleteContentStream()
{
	RunFunction(L"DeleteContentStream");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeleteFormField(int Index)
{
	RunFunction(L"DeleteFormField", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeleteOptionalContentGroup(int OptionalContentGroupID)
{
	RunFunction(L"DeleteOptionalContentGroup", OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeletePageLGIDict(int DictIndex)
{
	RunFunction(L"DeletePageLGIDict", DictIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DeletePages(int StartPage, int PageCount)
{
	RunFunction(L"DeletePages", StartPage, PageCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DocJavaScriptAction(const std::wstring& ActionType, const std::wstring& JavaScript)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"DocJavaScriptAction", bstrActionType, bstrJavaScript);
	SysFreeString(bstrActionType);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DocumentCount()
{
	RunFunction(L"DocumentCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawArc(double XPos, double YPos, double Radius, double StartAngle, double EndAngle, int Pie, int DrawOptions)
{
	RunFunction(L"DrawArc", XPos, YPos, Radius, StartAngle, EndAngle, Pie, 
	DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawBarcode(double Left, double Top, double Width, double Height, const std::wstring& Text, int Barcode, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawBarcode", Left, Top, Width, Height, bstrText, Barcode, 
	Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawBox(double Left, double Top, double Width, double Height, int DrawOptions)
{
	RunFunction(L"DrawBox", Left, Top, Width, Height, DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawCapturedPage(int CaptureID, double Left, double Top, double Width, double Height)
{
	RunFunction(L"DrawCapturedPage", CaptureID, Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawCircle(double XPos, double YPos, double Radius, int DrawOptions)
{
	RunFunction(L"DrawCircle", XPos, YPos, Radius, DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawDataMatrixSymbol(double Left, double Top, double ModuleSize, const std::wstring& Text, int Encoding, int SymbolSize, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawDataMatrixSymbol", Left, Top, ModuleSize, bstrText, 
	Encoding, SymbolSize, Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawEllipse(double XPos, double YPos, double Width, double Height, int DrawOptions)
{
	RunFunction(L"DrawEllipse", XPos, YPos, Width, Height, DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawEllipticArc(double XPos, double YPos, double Width, double Height, double StartAngle, double EndAngle, int Pie, int DrawOptions)
{
	RunFunction(L"DrawEllipticArc", XPos, YPos, Width, Height, StartAngle, 
	EndAngle, Pie, DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawHTMLText(double Left, double Top, double Width, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"DrawHTMLText", Left, Top, Width, bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::DrawHTMLTextBox(double Left, double Top, double Width, double Height, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"DrawHTMLTextBox", Left, Top, Width, Height, bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::DrawImage(double Left, double Top, double Width, double Height)
{
	RunFunction(L"DrawImage", Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawImageMatrix(double M11, double M12, double M21, double M22, double MDX, double MDY)
{
	RunFunction(L"DrawImageMatrix", M11, M12, M21, M22, MDX, MDY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawIntelligentMailBarcode(double Left, double Top, double BarWidth, double FullBarHeight, double TrackerHeight, double SpaceWidth, const std::wstring& BarcodeData, int Options)
{
	BSTR bstrBarcodeData = SysAllocStringLen(BarcodeData.c_str(), (int)(BarcodeData.length()));
	RunFunction(L"DrawIntelligentMailBarcode", Left, Top, BarWidth, 
	FullBarHeight, TrackerHeight, SpaceWidth, bstrBarcodeData, Options);
	SysFreeString(bstrBarcodeData);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawLine(double StartX, double StartY, double EndX, double EndY)
{
	RunFunction(L"DrawLine", StartX, StartY, EndX, EndY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawMultiLineText(double XPos, double YPos, const std::wstring& Delimiter, const std::wstring& Text)
{
	BSTR bstrDelimiter = SysAllocStringLen(Delimiter.c_str(), (int)(Delimiter.length()));
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawMultiLineText", XPos, YPos, bstrDelimiter, bstrText);
	SysFreeString(bstrDelimiter);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawPDF417Symbol(double Left, double Top, const std::wstring& Text, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawPDF417Symbol", Left, Top, bstrText, Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawPath(int PathOptions)
{
	RunFunction(L"DrawPath", PathOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawPathEvenOdd(int PathOptions)
{
	RunFunction(L"DrawPathEvenOdd", PathOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawPostScriptXObject(int PSRef)
{
	RunFunction(L"DrawPostScriptXObject", PSRef);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedBox(double Left, double Bottom, double Width, double Height, double Angle, int DrawOptions)
{
	RunFunction(L"DrawRotatedBox", Left, Bottom, Width, Height, Angle, 
	DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedCapturedPage(int CaptureID, double Left, double Bottom, double Width, double Height, double Angle)
{
	RunFunction(L"DrawRotatedCapturedPage", CaptureID, Left, Bottom, Width, 
	Height, Angle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedImage(double Left, double Bottom, double Width, double Height, double Angle)
{
	RunFunction(L"DrawRotatedImage", Left, Bottom, Width, Height, Angle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedMultiLineText(double XPos, double YPos, double Angle, const std::wstring& Delimiter, const std::wstring& Text)
{
	BSTR bstrDelimiter = SysAllocStringLen(Delimiter.c_str(), (int)(Delimiter.length()));
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawRotatedMultiLineText", XPos, YPos, Angle, bstrDelimiter, 
	bstrText);
	SysFreeString(bstrDelimiter);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedText(double XPos, double YPos, double Angle, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawRotatedText", XPos, YPos, Angle, bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRotatedTextBox(double Left, double Top, double Width, double Height, double Angle, const std::wstring& Text, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawRotatedTextBox", Left, Top, Width, Height, Angle, bstrText, 
	Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawRoundedBox(double Left, double Top, double Width, double Height, double Radius, int DrawOptions)
{
	RunFunction(L"DrawRoundedBox", Left, Top, Width, Height, Radius, 
	DrawOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawScaledImage(double Left, double Top, double Scale)
{
	RunFunction(L"DrawScaledImage", Left, Top, Scale);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawSpacedText(double XPos, double YPos, double Spacing, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawSpacedText", XPos, YPos, Spacing, bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::DrawTableRows(int TableID, double Left, double Top, double Height, int FirstRow, int LastRow)
{
	RunFunction(L"DrawTableRows", TableID, Left, Top, Height, FirstRow, 
	LastRow);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::DrawText(double XPos, double YPos, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawText", XPos, YPos, bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawTextArc(double XPos, double YPos, double Radius, double Angle, const std::wstring& Text, int DrawOptions)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawTextArc", XPos, YPos, Radius, Angle, bstrText, 
	DrawOptions);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawTextBox(double Left, double Top, double Width, double Height, const std::wstring& Text, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawTextBox", Left, Top, Width, Height, bstrText, Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::DrawWrappedText(double XPos, double YPos, double Width, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"DrawWrappedText", XPos, YPos, Width, bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EditableContentStream()
{
	RunFunction(L"EditableContentStream");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EmbedFile(const std::wstring& Title, const std::wstring& FileName, const std::wstring& MIMEType)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	BSTR bstrMIMEType = SysAllocStringLen(MIMEType.c_str(), (int)(MIMEType.length()));
	RunFunction(L"EmbedFile", bstrTitle, bstrFileName, bstrMIMEType);
	SysFreeString(bstrTitle);
	SysFreeString(bstrFileName);
	SysFreeString(bstrMIMEType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EmbeddedFileCount()
{
	RunFunction(L"EmbeddedFileCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncapsulateContentStream()
{
	RunFunction(L"EncapsulateContentStream");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncodePermissions(int CanPrint, int CanCopy, int CanChange, int CanAddNotes, int CanFillFields, int CanCopyAccess, int CanAssemble, int CanPrintFull)
{
	RunFunction(L"EncodePermissions", CanPrint, CanCopy, CanChange, 
	CanAddNotes, CanFillFields, CanCopyAccess, CanAssemble, CanPrintFull);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::EncodeStringFromVariant(std::vector<BYTE>& NumberList, const std::wstring& Encoding, int UnmatchedAction)
{
	VARIANT arNumberList = MakeByteArray(NumberList);
	BSTR bstrEncoding = SysAllocStringLen(Encoding.c_str(), (int)(Encoding.length()));
	RunFunction(L"EncodeStringFromVariant", arNumberList, bstrEncoding, 
	UnmatchedAction);
	SafeArrayDestroy(arNumberList.parray);
	SysFreeString(bstrEncoding);
	return GetString();
}

int DebenuPDFLibraryAX0912::Encrypt(const std::wstring& Owner, const std::wstring& User, int Strength, int Permissions)
{
	BSTR bstrOwner = SysAllocStringLen(Owner.c_str(), (int)(Owner.length()));
	BSTR bstrUser = SysAllocStringLen(User.c_str(), (int)(User.length()));
	RunFunction(L"Encrypt", bstrOwner, bstrUser, Strength, Permissions);
	SysFreeString(bstrOwner);
	SysFreeString(bstrUser);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncryptFile(const std::wstring& InputFileName, const std::wstring& OutputFileName, const std::wstring& Owner, const std::wstring& User, int Strength, int Permissions)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	BSTR bstrOwner = SysAllocStringLen(Owner.c_str(), (int)(Owner.length()));
	BSTR bstrUser = SysAllocStringLen(User.c_str(), (int)(User.length()));
	RunFunction(L"EncryptFile", bstrInputFileName, bstrOutputFileName, bstrOwner, 
	bstrUser, Strength, Permissions);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrOutputFileName);
	SysFreeString(bstrOwner);
	SysFreeString(bstrUser);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncryptWithFingerprint(const std::wstring& Fingerprint)
{
	BSTR bstrFingerprint = SysAllocStringLen(Fingerprint.c_str(), (int)(Fingerprint.length()));
	RunFunction(L"EncryptWithFingerprint", bstrFingerprint);
	SysFreeString(bstrFingerprint);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncryptionAlgorithm()
{
	RunFunction(L"EncryptionAlgorithm");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncryptionStatus()
{
	RunFunction(L"EncryptionStatus");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EncryptionStrength()
{
	RunFunction(L"EncryptionStrength");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::EndPageUpdate()
{
	RunFunction(L"EndPageUpdate");
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::ExtractFilePageContentToVariant(const std::wstring& InputFileName, const std::wstring& Password, int Page)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"ExtractFilePageContentToVariant", bstrInputFileName, 
	bstrPassword, Page);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return GetByteArray();
}

std::wstring DebenuPDFLibraryAX0912::ExtractFilePageText(const std::wstring& InputFileName, const std::wstring& Password, int Page, int Options)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"ExtractFilePageText", bstrInputFileName, bstrPassword, 
	Page, Options);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::ExtractFilePages(const std::wstring& InputFileName, const std::wstring& Password, const std::wstring& OutputFileName, const std::wstring& RangeList)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	BSTR bstrRangeList = SysAllocStringLen(RangeList.c_str(), (int)(RangeList.length()));
	RunFunction(L"ExtractFilePages", bstrInputFileName, bstrPassword, 
	bstrOutputFileName, bstrRangeList);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	SysFreeString(bstrOutputFileName);
	SysFreeString(bstrRangeList);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ExtractPageRanges(const std::wstring& RangeList)
{
	BSTR bstrRangeList = SysAllocStringLen(RangeList.c_str(), (int)(RangeList.length()));
	RunFunction(L"ExtractPageRanges", bstrRangeList);
	SysFreeString(bstrRangeList);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ExtractPages(int StartPage, int PageCount)
{
	RunFunction(L"ExtractPages", StartPage, PageCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FileListCount(const std::wstring& ListName)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	RunFunction(L"FileListCount", bstrListName);
	SysFreeString(bstrListName);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::FileListItem(const std::wstring& ListName, int Index)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	RunFunction(L"FileListItem", bstrListName, Index);
	SysFreeString(bstrListName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::FindFonts()
{
	RunFunction(L"FindFonts");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FindFormFieldByTitle(const std::wstring& Title)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"FindFormFieldByTitle", bstrTitle);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FindImages()
{
	RunFunction(L"FindImages");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FitImage(double Left, double Top, double Width, double Height, int HAlign, int VAlign, int Rotate)
{
	RunFunction(L"FitImage", Left, Top, Width, Height, HAlign, VAlign, 
	Rotate);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FitRotatedTextBox(double Left, double Top, double Width, double Height, double Angle, const std::wstring& Text, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"FitRotatedTextBox", Left, Top, Width, Height, Angle, bstrText, 
	Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FitTextBox(double Left, double Top, double Width, double Height, const std::wstring& Text, int Options)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"FitTextBox", Left, Top, Width, Height, bstrText, Options);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FlattenFormField(int Index)
{
	RunFunction(L"FlattenFormField", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FontCount()
{
	RunFunction(L"FontCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::FontFamily()
{
	RunFunction(L"FontFamily");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::FontHasKerning()
{
	RunFunction(L"FontHasKerning");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::FontName()
{
	RunFunction(L"FontName");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::FontReference()
{
	RunFunction(L"FontReference");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::FontSize()
{
	RunFunction(L"FontSize");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FontType()
{
	RunFunction(L"FontType");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FormFieldCount()
{
	RunFunction(L"FormFieldCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FormFieldHasParent(int Index)
{
	RunFunction(L"FormFieldHasParent", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FormFieldJavaScriptAction(int Index, const std::wstring& ActionType, const std::wstring& JavaScript)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"FormFieldJavaScriptAction", Index, bstrActionType, 
	bstrJavaScript);
	SysFreeString(bstrActionType);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::FormFieldWebLinkAction(int Index, const std::wstring& ActionType, const std::wstring& Link)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	BSTR bstrLink = SysAllocStringLen(Link.c_str(), (int)(Link.length()));
	RunFunction(L"FormFieldWebLinkAction", Index, bstrActionType, bstrLink);
	SysFreeString(bstrActionType);
	SysFreeString(bstrLink);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetActionDest(int ActionID)
{
	RunFunction(L"GetActionDest", ActionID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetActionType(int ActionID)
{
	RunFunction(L"GetActionType", ActionID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetActionURL(int ActionID)
{
	RunFunction(L"GetActionURL", ActionID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetAnalysisInfo(int AnalysisID, int AnalysisItem)
{
	RunFunction(L"GetAnalysisInfo", AnalysisID, AnalysisItem);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetAnnotActionID(int Index)
{
	RunFunction(L"GetAnnotActionID", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetAnnotDblProperty(int Index, int Tag)
{
	RunFunction(L"GetAnnotDblProperty", Index, Tag);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetAnnotDest(int Index)
{
	RunFunction(L"GetAnnotDest", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetAnnotIntProperty(int Index, int Tag)
{
	RunFunction(L"GetAnnotIntProperty", Index, Tag);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetAnnotQuadCount(int Index)
{
	RunFunction(L"GetAnnotQuadCount", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetAnnotQuadPoints(int Index, int QuadNumber, int PointNumber)
{
	RunFunction(L"GetAnnotQuadPoints", Index, QuadNumber, PointNumber);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetAnnotStrProperty(int Index, int Tag)
{
	RunFunction(L"GetAnnotStrProperty", Index, Tag);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetBarcodeWidth(double NominalWidth, const std::wstring& Text, int Barcode)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetBarcodeWidth", NominalWidth, bstrText, Barcode);
	SysFreeString(bstrText);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetBaseURL()
{
	RunFunction(L"GetBaseURL");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetCSDictEPSG(int CSDictID)
{
	RunFunction(L"GetCSDictEPSG", CSDictID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetCSDictType(int CSDictID)
{
	RunFunction(L"GetCSDictType", CSDictID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetCSDictWKT(int CSDictID)
{
	RunFunction(L"GetCSDictWKT", CSDictID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

HDC DebenuPDFLibraryAX0912::GetCanvasDC(int CanvasWidth, int CanvasHeight)
{
	RunFunction(L"GetCanvasDC", CanvasWidth, CanvasHeight);
	return (HDC) result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetCatalogInformation(const std::wstring& Key)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	RunFunction(L"GetCatalogInformation", bstrKey);
	SysFreeString(bstrKey);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetContentStreamToVariant()
{
	RunFunction(L"GetContentStreamToVariant");
	return GetByteArray();
}

std::wstring DebenuPDFLibraryAX0912::GetCustomInformation(const std::wstring& Key)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	RunFunction(L"GetCustomInformation", bstrKey);
	SysFreeString(bstrKey);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetCustomKeys(int Location)
{
	RunFunction(L"GetCustomKeys", Location);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetDefaultPrinterName()
{
	RunFunction(L"GetDefaultPrinterName");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetDestName(int DestID)
{
	RunFunction(L"GetDestName", DestID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetDestPage(int DestID)
{
	RunFunction(L"GetDestPage", DestID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetDestType(int DestID)
{
	RunFunction(L"GetDestType", DestID);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetDestValue(int DestID, int ValueKey)
{
	RunFunction(L"GetDestValue", DestID, ValueKey);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetDocJavaScript(const std::wstring& ActionType)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	RunFunction(L"GetDocJavaScript", bstrActionType);
	SysFreeString(bstrActionType);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetDocumentFileName()
{
	RunFunction(L"GetDocumentFileName");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetDocumentFileSize()
{
	RunFunction(L"GetDocumentFileSize");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetDocumentID(int Index)
{
	RunFunction(L"GetDocumentID", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetDocumentIdentifier(int Part, int Options)
{
	RunFunction(L"GetDocumentIdentifier", Part, Options);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetDocumentMetadata()
{
	RunFunction(L"GetDocumentMetadata");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetDocumentRepaired()
{
	RunFunction(L"GetDocumentRepaired");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetDocumentResourceList()
{
	RunFunction(L"GetDocumentResourceList");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetEmbeddedFileContentToFile(int Index, const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"GetEmbeddedFileContentToFile", Index, bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetEmbeddedFileContentToVariant(int Index)
{
	RunFunction(L"GetEmbeddedFileContentToVariant", Index);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::GetEmbeddedFileID(int Index)
{
	RunFunction(L"GetEmbeddedFileID", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetEmbeddedFileIntProperty(int Index, int Tag)
{
	RunFunction(L"GetEmbeddedFileIntProperty", Index, Tag);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetEmbeddedFileStrProperty(int Index, int Tag)
{
	RunFunction(L"GetEmbeddedFileStrProperty", Index, Tag);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetEncryptionFingerprint()
{
	RunFunction(L"GetEncryptionFingerprint");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFileMetadata(const std::wstring& InputFileName, const std::wstring& Password)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"GetFileMetadata", bstrInputFileName, bstrPassword);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFirstChildOutline(int OutlineID)
{
	RunFunction(L"GetFirstChildOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFirstOutline()
{
	RunFunction(L"GetFirstOutline");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFontEncoding()
{
	RunFunction(L"GetFontEncoding");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFontID(int Index)
{
	RunFunction(L"GetFontID", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFontObjectNumber()
{
	RunFunction(L"GetFontObjectNumber");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldActionID(int Index, const std::wstring& TriggerEvent)
{
	BSTR bstrTriggerEvent = SysAllocStringLen(TriggerEvent.c_str(), (int)(TriggerEvent.length()));
	RunFunction(L"GetFormFieldActionID", Index, bstrTriggerEvent);
	SysFreeString(bstrTriggerEvent);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldAlignment(int Index)
{
	RunFunction(L"GetFormFieldAlignment", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldAnnotFlags(int Index)
{
	RunFunction(L"GetFormFieldAnnotFlags", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldBackgroundColor(int Index, int ColorComponent)
{
	RunFunction(L"GetFormFieldBackgroundColor", Index, ColorComponent);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldBackgroundColorType(int Index)
{
	RunFunction(L"GetFormFieldBackgroundColorType", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldBorderColor(int Index, int ColorComponent)
{
	RunFunction(L"GetFormFieldBorderColor", Index, ColorComponent);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldBorderColorType(int Index)
{
	RunFunction(L"GetFormFieldBorderColorType", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldBorderProperty(int Index, int PropKey)
{
	RunFunction(L"GetFormFieldBorderProperty", Index, PropKey);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldBorderStyle(int Index)
{
	RunFunction(L"GetFormFieldBorderStyle", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldBound(int Index, int Edge)
{
	RunFunction(L"GetFormFieldBound", Index, Edge);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldCaption(int Index)
{
	RunFunction(L"GetFormFieldCaption", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldChildTitle(int Index)
{
	RunFunction(L"GetFormFieldChildTitle", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldChoiceType(int Index)
{
	RunFunction(L"GetFormFieldChoiceType", Index);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldColor(int Index, int ColorComponent)
{
	RunFunction(L"GetFormFieldColor", Index, ColorComponent);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldComb(int Index)
{
	RunFunction(L"GetFormFieldComb", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldDefaultValue(int Index)
{
	RunFunction(L"GetFormFieldDefaultValue", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldDescription(int Index)
{
	RunFunction(L"GetFormFieldDescription", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldFlags(int Index)
{
	RunFunction(L"GetFormFieldFlags", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldFontName(int Index)
{
	RunFunction(L"GetFormFieldFontName", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldJavaScript(int Index, const std::wstring& ActionType)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	RunFunction(L"GetFormFieldJavaScript", Index, bstrActionType);
	SysFreeString(bstrActionType);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldKidCount(int Index)
{
	RunFunction(L"GetFormFieldKidCount", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldMaxLen(int Index)
{
	RunFunction(L"GetFormFieldMaxLen", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldNoExport(int Index)
{
	RunFunction(L"GetFormFieldNoExport", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldPage(int Index)
{
	RunFunction(L"GetFormFieldPage", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldPrintable(int Index)
{
	RunFunction(L"GetFormFieldPrintable", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldReadOnly(int Index)
{
	RunFunction(L"GetFormFieldReadOnly", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldRequired(int Index)
{
	RunFunction(L"GetFormFieldRequired", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldRotation(int Index)
{
	RunFunction(L"GetFormFieldRotation", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldSubCount(int Index)
{
	RunFunction(L"GetFormFieldSubCount", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldSubDisplayName(int Index, int SubIndex)
{
	RunFunction(L"GetFormFieldSubDisplayName", Index, SubIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldSubName(int Index, int SubIndex)
{
	RunFunction(L"GetFormFieldSubName", Index, SubIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldSubTempIndex(int Index, int SubIndex)
{
	RunFunction(L"GetFormFieldSubTempIndex", Index, SubIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldTabOrder(int Index)
{
	RunFunction(L"GetFormFieldTabOrder", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetFormFieldTextFlags(int Index, int ValueKey)
{
	RunFunction(L"GetFormFieldTextFlags", Index, ValueKey);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetFormFieldTextSize(int Index)
{
	RunFunction(L"GetFormFieldTextSize", Index);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldTitle(int Index)
{
	RunFunction(L"GetFormFieldTitle", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldType(int Index)
{
	RunFunction(L"GetFormFieldType", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldValue(int Index)
{
	RunFunction(L"GetFormFieldValue", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldValueByTitle(const std::wstring& Title)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"GetFormFieldValueByTitle", bstrTitle);
	SysFreeString(bstrTitle);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFieldVisible(int Index)
{
	RunFunction(L"GetFormFieldVisible", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFieldWebLink(int Index, const std::wstring& ActionType)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	RunFunction(L"GetFormFieldWebLink", Index, bstrActionType);
	SysFreeString(bstrActionType);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetFormFontCount()
{
	RunFunction(L"GetFormFontCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetFormFontName(int FontIndex)
{
	RunFunction(L"GetFormFontName", FontIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetGlobalJavaScript(const std::wstring& PackageName)
{
	BSTR bstrPackageName = SysAllocStringLen(PackageName.c_str(), (int)(PackageName.length()));
	RunFunction(L"GetGlobalJavaScript", bstrPackageName);
	SysFreeString(bstrPackageName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetHTMLTextHeight(double Width, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"GetHTMLTextHeight", Width, bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetHTMLTextLineCount(double Width, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"GetHTMLTextLineCount", Width, bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetHTMLTextWidth(double MaxWidth, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"GetHTMLTextWidth", MaxWidth, bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetImageID(int Index)
{
	RunFunction(L"GetImageID", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetImageListCount(int ImageListID)
{
	RunFunction(L"GetImageListCount", ImageListID);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetImageListItemDataToVariant(int ImageListID, int ImageIndex, int Options)
{
	RunFunction(L"GetImageListItemDataToVariant", ImageListID, ImageIndex, 
	Options);
	return GetByteArray();
}

double DebenuPDFLibraryAX0912::GetImageListItemDblProperty(int ImageListID, int ImageIndex, int PropertyID)
{
	RunFunction(L"GetImageListItemDblProperty", ImageListID, ImageIndex, 
	PropertyID);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetImageListItemIntProperty(int ImageListID, int ImageIndex, int PropertyID)
{
	RunFunction(L"GetImageListItemIntProperty", ImageListID, ImageIndex, 
	PropertyID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetImageMeasureDict()
{
	RunFunction(L"GetImageMeasureDict");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetImagePageCount(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"GetImagePageCount", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetImagePageCountFromString(const std::wstring& Source)
{
	BSTR bstrSource = SysAllocStringLen(Source.c_str(), (int)(Source.length()));
	RunFunction(L"GetImagePageCountFromString", bstrSource);
	SysFreeString(bstrSource);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetImagePtDataDict()
{
	RunFunction(L"GetImagePtDataDict");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetInformation(int Key)
{
	RunFunction(L"GetInformation", Key);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetInstalledFontsByCharset(int CharsetIndex, int Options)
{
	RunFunction(L"GetInstalledFontsByCharset", CharsetIndex, Options);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetInstalledFontsByCodePage(int CodePage, int Options)
{
	RunFunction(L"GetInstalledFontsByCodePage", CodePage, Options);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetKerning(const std::wstring& CharPair)
{
	BSTR bstrCharPair = SysAllocStringLen(CharPair.c_str(), (int)(CharPair.length()));
	RunFunction(L"GetKerning", bstrCharPair);
	SysFreeString(bstrCharPair);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetLatestPrinterNames()
{
	RunFunction(L"GetLatestPrinterNames");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetMaxObjectNumber()
{
	RunFunction(L"GetMaxObjectNumber");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictBoundsCount(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictBoundsCount", MeasureDictID);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetMeasureDictBoundsItem(int MeasureDictID, int ItemIndex)
{
	RunFunction(L"GetMeasureDictBoundsItem", MeasureDictID, ItemIndex);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictCoordinateSystem(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictCoordinateSystem", MeasureDictID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictDCSDict(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictDCSDict", MeasureDictID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictGCSDict(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictGCSDict", MeasureDictID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictGPTSCount(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictGPTSCount", MeasureDictID);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetMeasureDictGPTSItem(int MeasureDictID, int ItemIndex)
{
	RunFunction(L"GetMeasureDictGPTSItem", MeasureDictID, ItemIndex);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictLPTSCount(int MeasureDictID)
{
	RunFunction(L"GetMeasureDictLPTSCount", MeasureDictID);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetMeasureDictLPTSItem(int MeasureDictID, int ItemIndex)
{
	RunFunction(L"GetMeasureDictLPTSItem", MeasureDictID, ItemIndex);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetMeasureDictPDU(int MeasureDictID, int UnitIndex)
{
	RunFunction(L"GetMeasureDictPDU", MeasureDictID, UnitIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetNamedDestination(const std::wstring& DestName)
{
	BSTR bstrDestName = SysAllocStringLen(DestName.c_str(), (int)(DestName.length()));
	RunFunction(L"GetNamedDestination", bstrDestName);
	SysFreeString(bstrDestName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetNextOutline(int OutlineID)
{
	RunFunction(L"GetNextOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetObjectCount()
{
	RunFunction(L"GetObjectCount");
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetObjectToVariant(int ObjectNumber)
{
	RunFunction(L"GetObjectToVariant", ObjectNumber);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::GetOpenActionDestination()
{
	RunFunction(L"GetOpenActionDestination");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOpenActionJavaScript()
{
	RunFunction(L"GetOpenActionJavaScript");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigCount()
{
	RunFunction(L"GetOptionalContentConfigCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigLocked(int OptionalContentConfigID, int OptionalContentGroupID)
{
	RunFunction(L"GetOptionalContentConfigLocked", OptionalContentConfigID, 
	OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigOrderCount(int OptionalContentConfigID)
{
	RunFunction(L"GetOptionalContentConfigOrderCount", 
	OptionalContentConfigID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigOrderItemID(int OptionalContentConfigID, int ItemIndex)
{
	RunFunction(L"GetOptionalContentConfigOrderItemID", 
	OptionalContentConfigID, ItemIndex);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOptionalContentConfigOrderItemLabel(int OptionalContentConfigID, int ItemIndex)
{
	RunFunction(L"GetOptionalContentConfigOrderItemLabel", 
	OptionalContentConfigID, ItemIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigOrderItemLevel(int OptionalContentConfigID, int ItemIndex)
{
	RunFunction(L"GetOptionalContentConfigOrderItemLevel", 
	OptionalContentConfigID, ItemIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigOrderItemType(int OptionalContentConfigID, int ItemIndex)
{
	RunFunction(L"GetOptionalContentConfigOrderItemType", 
	OptionalContentConfigID, ItemIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentConfigState(int OptionalContentConfigID, int OptionalContentGroupID)
{
	RunFunction(L"GetOptionalContentConfigState", OptionalContentConfigID, 
	OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentGroupID(int Index)
{
	RunFunction(L"GetOptionalContentGroupID", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOptionalContentGroupName(int OptionalContentGroupID)
{
	RunFunction(L"GetOptionalContentGroupName", OptionalContentGroupID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetOptionalContentGroupPrintable(int OptionalContentGroupID)
{
	RunFunction(L"GetOptionalContentGroupPrintable", OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOptionalContentGroupVisible(int OptionalContentGroupID)
{
	RunFunction(L"GetOptionalContentGroupVisible", OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOrigin()
{
	RunFunction(L"GetOrigin");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOutlineActionID(int OutlineID)
{
	RunFunction(L"GetOutlineActionID", OutlineID);
	return result.intVal;
}

double DebenuPDFLibraryAX0912::GetOutlineColor(int OutlineID, int ColorComponent)
{
	RunFunction(L"GetOutlineColor", OutlineID, ColorComponent);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetOutlineDest(int OutlineID)
{
	RunFunction(L"GetOutlineDest", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOutlineID(int Index)
{
	RunFunction(L"GetOutlineID", Index);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOutlineJavaScript(int OutlineID)
{
	RunFunction(L"GetOutlineJavaScript", OutlineID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetOutlineObjectNumber(int OutlineID)
{
	RunFunction(L"GetOutlineObjectNumber", OutlineID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOutlineOpenFile(int OutlineID)
{
	RunFunction(L"GetOutlineOpenFile", OutlineID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetOutlinePage(int OutlineID)
{
	RunFunction(L"GetOutlinePage", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetOutlineStyle(int OutlineID)
{
	RunFunction(L"GetOutlineStyle", OutlineID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetOutlineWebLink(int OutlineID)
{
	RunFunction(L"GetOutlineWebLink", OutlineID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetPageBox(int BoxType, int Dimension)
{
	RunFunction(L"GetPageBox", BoxType, Dimension);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetPageColorSpaces(int Options)
{
	RunFunction(L"GetPageColorSpaces", Options);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetPageContentToVariant()
{
	RunFunction(L"GetPageContentToVariant");
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::GetPageImageList(int Options)
{
	RunFunction(L"GetPageImageList", Options);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetPageJavaScript(const std::wstring& ActionType)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	RunFunction(L"GetPageJavaScript", bstrActionType);
	SysFreeString(bstrActionType);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetPageLGIDictContent(int DictIndex)
{
	RunFunction(L"GetPageLGIDictContent", DictIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetPageLGIDictCount()
{
	RunFunction(L"GetPageLGIDictCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetPageLabel(int Page)
{
	RunFunction(L"GetPageLabel", Page);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetPageLayout()
{
	RunFunction(L"GetPageLayout");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetPageMode()
{
	RunFunction(L"GetPageMode");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetPageText(int ExtractOptions)
{
	RunFunction(L"GetPageText", ExtractOptions);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetPageViewPortCount()
{
	RunFunction(L"GetPageViewPortCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetPageViewPortID(int Index)
{
	RunFunction(L"GetPageViewPortID", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetParentOutline(int OutlineID)
{
	RunFunction(L"GetParentOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetPrevOutline(int OutlineID)
{
	RunFunction(L"GetPrevOutline", OutlineID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetPrinterBins(const std::wstring& PrinterName)
{
	BSTR bstrPrinterName = SysAllocStringLen(PrinterName.c_str(), (int)(PrinterName.length()));
	RunFunction(L"GetPrinterBins", bstrPrinterName);
	SysFreeString(bstrPrinterName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::vector<BYTE> DebenuPDFLibraryAX0912::GetPrinterDevModeToVariant(const std::wstring& PrinterName)
{
	BSTR bstrPrinterName = SysAllocStringLen(PrinterName.c_str(), (int)(PrinterName.length()));
	RunFunction(L"GetPrinterDevModeToVariant", bstrPrinterName);
	SysFreeString(bstrPrinterName);
	return GetByteArray();
}

std::wstring DebenuPDFLibraryAX0912::GetPrinterMediaTypes(const std::wstring& PrinterName)
{
	BSTR bstrPrinterName = SysAllocStringLen(PrinterName.c_str(), (int)(PrinterName.length()));
	RunFunction(L"GetPrinterMediaTypes", bstrPrinterName);
	SysFreeString(bstrPrinterName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetPrinterNames()
{
	RunFunction(L"GetPrinterNames");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetRenderScale()
{
	RunFunction(L"GetRenderScale");
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetStringListCount(int StringListID)
{
	RunFunction(L"GetStringListCount", StringListID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetStringListItem(int StringListID, int ItemIndex)
{
	RunFunction(L"GetStringListItem", StringListID, ItemIndex);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetTableCellDblProperty(int TableID, int RowNumber, int ColumnNumber, int Tag)
{
	RunFunction(L"GetTableCellDblProperty", TableID, RowNumber, ColumnNumber, 
	Tag);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetTableCellIntProperty(int TableID, int RowNumber, int ColumnNumber, int Tag)
{
	RunFunction(L"GetTableCellIntProperty", TableID, RowNumber, ColumnNumber, 
	Tag);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetTableCellStrProperty(int TableID, int RowNumber, int ColumnNumber, int Tag)
{
	RunFunction(L"GetTableCellStrProperty", TableID, RowNumber, ColumnNumber, 
	Tag);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetTableColumnCount(int TableID)
{
	RunFunction(L"GetTableColumnCount", TableID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetTableLastDrawnRow(int TableID)
{
	RunFunction(L"GetTableLastDrawnRow", TableID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetTableRowCount(int TableID)
{
	RunFunction(L"GetTableRowCount", TableID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetTempPath()
{
	RunFunction(L"GetTempPath");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetTextAscent()
{
	RunFunction(L"GetTextAscent");
	return result.dblVal;
}

double DebenuPDFLibraryAX0912::GetTextBound(int Edge)
{
	RunFunction(L"GetTextBound", Edge);
	return result.dblVal;
}

double DebenuPDFLibraryAX0912::GetTextDescent()
{
	RunFunction(L"GetTextDescent");
	return result.dblVal;
}

double DebenuPDFLibraryAX0912::GetTextHeight()
{
	RunFunction(L"GetTextHeight");
	return result.dblVal;
}

double DebenuPDFLibraryAX0912::GetTextSize()
{
	RunFunction(L"GetTextSize");
	return result.dblVal;
}

double DebenuPDFLibraryAX0912::GetTextWidth(const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetTextWidth", bstrText);
	SysFreeString(bstrText);
	return result.dblVal;
}

std::wstring DebenuPDFLibraryAX0912::GetUnicodeCharactersFromEncoding(int Encoding)
{
	RunFunction(L"GetUnicodeCharactersFromEncoding", Encoding);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetViewPortBBox(int ViewPortID, int Dimension)
{
	RunFunction(L"GetViewPortBBox", ViewPortID, Dimension);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetViewPortMeasureDict(int ViewPortID)
{
	RunFunction(L"GetViewPortMeasureDict", ViewPortID);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetViewPortName(int ViewPortID)
{
	RunFunction(L"GetViewPortName", ViewPortID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::GetViewPortPtDataDict(int ViewPortID)
{
	RunFunction(L"GetViewPortPtDataDict", ViewPortID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetViewerPreferences(int Option)
{
	RunFunction(L"GetViewerPreferences", Option);
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetWrappedText(double Width, const std::wstring& Delimiter, const std::wstring& Text)
{
	BSTR bstrDelimiter = SysAllocStringLen(Delimiter.c_str(), (int)(Delimiter.length()));
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetWrappedText", Width, bstrDelimiter, bstrText);
	SysFreeString(bstrDelimiter);
	SysFreeString(bstrText);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetWrappedTextBreakString(double Width, const std::wstring& Delimiter, const std::wstring& Text)
{
	BSTR bstrDelimiter = SysAllocStringLen(Delimiter.c_str(), (int)(Delimiter.length()));
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetWrappedTextBreakString", Width, bstrDelimiter, bstrText);
	SysFreeString(bstrDelimiter);
	SysFreeString(bstrText);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

double DebenuPDFLibraryAX0912::GetWrappedTextHeight(double Width, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetWrappedTextHeight", Width, bstrText);
	SysFreeString(bstrText);
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::GetWrappedTextLineCount(double Width, const std::wstring& Text)
{
	BSTR bstrText = SysAllocStringLen(Text.c_str(), (int)(Text.length()));
	RunFunction(L"GetWrappedTextLineCount", Width, bstrText);
	SysFreeString(bstrText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::GetXFAFormFieldCount()
{
	RunFunction(L"GetXFAFormFieldCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GetXFAFormFieldName(int Index)
{
	RunFunction(L"GetXFAFormFieldName", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetXFAFormFieldNames(const std::wstring& Delimiter)
{
	BSTR bstrDelimiter = SysAllocStringLen(Delimiter.c_str(), (int)(Delimiter.length()));
	RunFunction(L"GetXFAFormFieldNames", bstrDelimiter);
	SysFreeString(bstrDelimiter);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetXFAFormFieldValue(const std::wstring& XFAFieldName)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	RunFunction(L"GetXFAFormFieldValue", bstrXFAFieldName);
	SysFreeString(bstrXFAFieldName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::GetXFAToString(int Options)
{
	RunFunction(L"GetXFAToString", Options);
	return GetString();
}

int DebenuPDFLibraryAX0912::GlobalJavaScriptCount()
{
	RunFunction(L"GlobalJavaScriptCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::GlobalJavaScriptPackageName(int Index)
{
	RunFunction(L"GlobalJavaScriptPackageName", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::HasFontResources()
{
	RunFunction(L"HasFontResources");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::HasPageBox(int BoxType)
{
	RunFunction(L"HasPageBox", BoxType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::HidePage()
{
	RunFunction(L"HidePage");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageCount()
{
	RunFunction(L"ImageCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageFillColor()
{
	RunFunction(L"ImageFillColor");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageHeight()
{
	RunFunction(L"ImageHeight");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageHorizontalResolution()
{
	RunFunction(L"ImageHorizontalResolution");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageResolutionUnits()
{
	RunFunction(L"ImageResolutionUnits");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageType()
{
	RunFunction(L"ImageType");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageVerticalResolution()
{
	RunFunction(L"ImageVerticalResolution");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImageWidth()
{
	RunFunction(L"ImageWidth");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ImportEMFFromFile(const std::wstring& FileName, int FontOptions, int GeneralOptions)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"ImportEMFFromFile", bstrFileName, FontOptions, 
	GeneralOptions);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::InsertPages(int StartPage, int PageCount)
{
	RunFunction(L"InsertPages", StartPage, PageCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::InsertTableColumns(int TableID, int Position, int NewColumnCount)
{
	RunFunction(L"InsertTableColumns", TableID, Position, NewColumnCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::InsertTableRows(int TableID, int Position, int NewRowCount)
{
	RunFunction(L"InsertTableRows", TableID, Position, NewRowCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::IsAnnotFormField(int Index)
{
	RunFunction(L"IsAnnotFormField", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::LastErrorCode()
{
	RunFunction(L"LastErrorCode");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::LastRenderError()
{
	RunFunction(L"LastRenderError");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::LibraryVersion()
{
	RunFunction(L"LibraryVersion");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

std::wstring DebenuPDFLibraryAX0912::LicenseInfo()
{
	RunFunction(L"LicenseInfo");
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::Linearized()
{
	RunFunction(L"Linearized");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::LoadFromCanvasDC(double DPI, int Options)
{
	RunFunction(L"LoadFromCanvasDC", DPI, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::LoadFromFile(const std::wstring& FileName, const std::wstring& Password)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"LoadFromFile", bstrFileName, bstrPassword);
	SysFreeString(bstrFileName);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::LoadFromVariant(std::vector<BYTE>& Source, const std::wstring& Password)
{
	VARIANT arSource = MakeByteArray(Source);
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	RunFunction(L"LoadFromVariant", arSource, bstrPassword);
	SafeArrayDestroy(arSource.parray);
	SysFreeString(bstrPassword);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::LoadState()
{
	RunFunction(L"LoadState");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MergeDocument(int DocumentID)
{
	RunFunction(L"MergeDocument", DocumentID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MergeFileList(const std::wstring& ListName, const std::wstring& OutputFileName)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	RunFunction(L"MergeFileList", bstrListName, bstrOutputFileName);
	SysFreeString(bstrListName);
	SysFreeString(bstrOutputFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MergeFileListFast(const std::wstring& ListName, const std::wstring& OutputFileName)
{
	BSTR bstrListName = SysAllocStringLen(ListName.c_str(), (int)(ListName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	RunFunction(L"MergeFileListFast", bstrListName, bstrOutputFileName);
	SysFreeString(bstrListName);
	SysFreeString(bstrOutputFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MergeFiles(const std::wstring& FirstFileName, const std::wstring& SecondFileName, const std::wstring& OutputFileName)
{
	BSTR bstrFirstFileName = SysAllocStringLen(FirstFileName.c_str(), (int)(FirstFileName.length()));
	BSTR bstrSecondFileName = SysAllocStringLen(SecondFileName.c_str(), (int)(SecondFileName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	RunFunction(L"MergeFiles", bstrFirstFileName, bstrSecondFileName, 
	bstrOutputFileName);
	SysFreeString(bstrFirstFileName);
	SysFreeString(bstrSecondFileName);
	SysFreeString(bstrOutputFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MergeTableCells(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn)
{
	RunFunction(L"MergeTableCells", TableID, FirstRow, FirstColumn, LastRow, 
	LastColumn);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MoveContentStream(int FromPosition, int ToPosition)
{
	RunFunction(L"MoveContentStream", FromPosition, ToPosition);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MoveOutlineAfter(int OutlineID, int SiblingID)
{
	RunFunction(L"MoveOutlineAfter", OutlineID, SiblingID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MoveOutlineBefore(int OutlineID, int SiblingID)
{
	RunFunction(L"MoveOutlineBefore", OutlineID, SiblingID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MovePage(int NewPosition)
{
	RunFunction(L"MovePage", NewPosition);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MovePath(double NewX, double NewY)
{
	RunFunction(L"MovePath", NewX, NewY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::MultiplyScale(double MultScaleBy)
{
	RunFunction(L"MultiplyScale", MultScaleBy);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewChildFormField(int Index, const std::wstring& Title, int FieldType)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"NewChildFormField", Index, bstrTitle, FieldType);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewContentStream()
{
	RunFunction(L"NewContentStream");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::NewCustomPrinter(const std::wstring& OriginalPrinterName)
{
	BSTR bstrOriginalPrinterName = SysAllocStringLen(OriginalPrinterName.c_str(), (int)(OriginalPrinterName.length()));
	RunFunction(L"NewCustomPrinter", bstrOriginalPrinterName);
	SysFreeString(bstrOriginalPrinterName);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::NewDestination(int DestPage, int Zoom, int DestType, double Left, double Top, double Right, double Bottom)
{
	RunFunction(L"NewDestination", DestPage, Zoom, DestType, Left, Top, 
	Right, Bottom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewDocument()
{
	RunFunction(L"NewDocument");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewFormField(const std::wstring& Title, int FieldType)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"NewFormField", bstrTitle, FieldType);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewNamedDestination(const std::wstring& DestName, int DestID)
{
	BSTR bstrDestName = SysAllocStringLen(DestName.c_str(), (int)(DestName.length()));
	RunFunction(L"NewNamedDestination", bstrDestName, DestID);
	SysFreeString(bstrDestName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewOptionalContentGroup(const std::wstring& GroupName)
{
	BSTR bstrGroupName = SysAllocStringLen(GroupName.c_str(), (int)(GroupName.length()));
	RunFunction(L"NewOptionalContentGroup", bstrGroupName);
	SysFreeString(bstrGroupName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewOutline(int Parent, const std::wstring& Title, int DestPage, double DestPosition)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"NewOutline", Parent, bstrTitle, DestPage, DestPosition);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewPage()
{
	RunFunction(L"NewPage");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewPageFromCanvasDC(int DPI, int Options)
{
	RunFunction(L"NewPageFromCanvasDC", DPI, Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewPages(int PageCount)
{
	RunFunction(L"NewPages", PageCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewPostScriptXObject(const std::wstring& PS)
{
	BSTR bstrPS = SysAllocStringLen(PS.c_str(), (int)(PS.length()));
	RunFunction(L"NewPostScriptXObject", bstrPS);
	SysFreeString(bstrPS);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewRGBAxialShader(const std::wstring& ShaderName, double StartX, double StartY, double StartRed, double StartGreen, double StartBlue, double EndX, double EndY, double EndRed, double EndGreen, double EndBlue, int Extend)
{
	BSTR bstrShaderName = SysAllocStringLen(ShaderName.c_str(), (int)(ShaderName.length()));
	RunFunction(L"NewRGBAxialShader", bstrShaderName, StartX, StartY, 
	StartRed, StartGreen, StartBlue, EndX, EndY, EndRed, EndGreen, EndBlue, 
	Extend);
	SysFreeString(bstrShaderName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewStaticOutline(int Parent, const std::wstring& Title)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"NewStaticOutline", Parent, bstrTitle);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NewTilingPatternFromCapturedPage(const std::wstring& PatternName, int CaptureID)
{
	BSTR bstrPatternName = SysAllocStringLen(PatternName.c_str(), (int)(PatternName.length()));
	RunFunction(L"NewTilingPatternFromCapturedPage", bstrPatternName, 
	CaptureID);
	SysFreeString(bstrPatternName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NoEmbedFontListAdd(const std::wstring& FontName)
{
	BSTR bstrFontName = SysAllocStringLen(FontName.c_str(), (int)(FontName.length()));
	RunFunction(L"NoEmbedFontListAdd", bstrFontName);
	SysFreeString(bstrFontName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NoEmbedFontListCount()
{
	RunFunction(L"NoEmbedFontListCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::NoEmbedFontListGet(int Index)
{
	RunFunction(L"NoEmbedFontListGet", Index);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::NoEmbedFontListRemoveAll()
{
	RunFunction(L"NoEmbedFontListRemoveAll");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NoEmbedFontListRemoveIndex(int Index)
{
	RunFunction(L"NoEmbedFontListRemoveIndex", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NoEmbedFontListRemoveName(const std::wstring& FontName)
{
	BSTR bstrFontName = SysAllocStringLen(FontName.c_str(), (int)(FontName.length()));
	RunFunction(L"NoEmbedFontListRemoveName", bstrFontName);
	SysFreeString(bstrFontName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::NormalizePage(int NormalizeOptions)
{
	RunFunction(L"NormalizePage", NormalizeOptions);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::OpenOutline(int OutlineID)
{
	RunFunction(L"OpenOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::OptionalContentGroupCount()
{
	RunFunction(L"OptionalContentGroupCount");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::OutlineCount()
{
	RunFunction(L"OutlineCount");
	return result.intVal;
}

std::wstring DebenuPDFLibraryAX0912::OutlineTitle(int OutlineID)
{
	RunFunction(L"OutlineTitle", OutlineID);
	return std::wstring(result.bstrVal, SysStringLen(result.bstrVal));
}

int DebenuPDFLibraryAX0912::PageCount()
{
	RunFunction(L"PageCount");
	return result.intVal;
}

double DebenuPDFLibraryAX0912::PageHeight()
{
	RunFunction(L"PageHeight");
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::PageJavaScriptAction(const std::wstring& ActionType, const std::wstring& JavaScript)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"PageJavaScriptAction", bstrActionType, bstrJavaScript);
	SysFreeString(bstrActionType);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::PageRotation()
{
	RunFunction(L"PageRotation");
	return result.intVal;
}

double DebenuPDFLibraryAX0912::PageWidth()
{
	RunFunction(L"PageWidth");
	return result.dblVal;
}

int DebenuPDFLibraryAX0912::PrintDocument(const std::wstring& PrinterName, int StartPage, int EndPage, int Options)
{
	BSTR bstrPrinterName = SysAllocStringLen(PrinterName.c_str(), (int)(PrinterName.length()));
	RunFunction(L"PrintDocument", bstrPrinterName, StartPage, EndPage, 
	Options);
	SysFreeString(bstrPrinterName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::PrintDocumentToFile(const std::wstring& PrinterName, int StartPage, int EndPage, int Options, const std::wstring& FileName)
{
	BSTR bstrPrinterName = SysAllocStringLen(PrinterName.c_str(), (int)(PrinterName.length()));
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"PrintDocumentToFile", bstrPrinterName, StartPage, EndPage, 
	Options, bstrFileName);
	SysFreeString(bstrPrinterName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::PrintOptions(int PageScaling, int AutoRotateCenter, const std::wstring& Title)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	RunFunction(L"PrintOptions", PageScaling, AutoRotateCenter, bstrTitle);
	SysFreeString(bstrTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ReleaseImage(int ImageID)
{
	RunFunction(L"ReleaseImage", ImageID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ReleaseImageList(int ImageListID)
{
	RunFunction(L"ReleaseImageList", ImageListID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveAppearanceStream(int Index)
{
	RunFunction(L"RemoveAppearanceStream", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveCustomInformation(const std::wstring& Key)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	RunFunction(L"RemoveCustomInformation", bstrKey);
	SysFreeString(bstrKey);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveDocument(int DocumentID)
{
	RunFunction(L"RemoveDocument", DocumentID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveEmbeddedFile(int Index)
{
	RunFunction(L"RemoveEmbeddedFile", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveFormFieldBackgroundColor(int Index)
{
	RunFunction(L"RemoveFormFieldBackgroundColor", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveFormFieldBorderColor(int Index)
{
	RunFunction(L"RemoveFormFieldBorderColor", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveGlobalJavaScript(const std::wstring& PackageName)
{
	BSTR bstrPackageName = SysAllocStringLen(PackageName.c_str(), (int)(PackageName.length()));
	RunFunction(L"RemoveGlobalJavaScript", bstrPackageName);
	SysFreeString(bstrPackageName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveOpenAction()
{
	RunFunction(L"RemoveOpenAction");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveOutline(int OutlineID)
{
	RunFunction(L"RemoveOutline", OutlineID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveSharedContentStreams()
{
	RunFunction(L"RemoveSharedContentStreams");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveStyle(const std::wstring& StyleName)
{
	BSTR bstrStyleName = SysAllocStringLen(StyleName.c_str(), (int)(StyleName.length()));
	RunFunction(L"RemoveStyle", bstrStyleName);
	SysFreeString(bstrStyleName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveUsageRights()
{
	RunFunction(L"RemoveUsageRights");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RemoveXFAEntries(int Options)
{
	RunFunction(L"RemoveXFAEntries", Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RenderDocumentToFile(int DPI, int StartPage, int EndPage, int Options, const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"RenderDocumentToFile", DPI, StartPage, EndPage, Options, 
	bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RenderPageToDC(int DPI, int Page, HDC DC)
{
	RunFunction(L"RenderPageToDC", DPI, Page, DC);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RenderPageToFile(int DPI, int Page, int Options, const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"RenderPageToFile", DPI, Page, Options, bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::RenderPageToVariant(int DPI, int Page, int Options)
{
	RunFunction(L"RenderPageToVariant", DPI, Page, Options);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::ReplaceFonts()
{
	RunFunction(L"ReplaceFonts");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ReplaceImage(int OriginalImageID, int NewImageID)
{
	RunFunction(L"ReplaceImage", OriginalImageID, NewImageID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::ReplaceTag(const std::wstring& Tag, const std::wstring& NewValue)
{
	BSTR bstrTag = SysAllocStringLen(Tag.c_str(), (int)(Tag.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"ReplaceTag", bstrTag, bstrNewValue);
	SysFreeString(bstrTag);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RequestPrinterStatus(int StatusCommand)
{
	RunFunction(L"RequestPrinterStatus", StatusCommand);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RetrieveCustomDataToFile(const std::wstring& Key, const std::wstring& FileName, int Location)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"RetrieveCustomDataToFile", bstrKey, bstrFileName, Location);
	SysFreeString(bstrKey);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::RetrieveCustomDataToVariant(const std::wstring& Key, int Location)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	RunFunction(L"RetrieveCustomDataToVariant", bstrKey, Location);
	SysFreeString(bstrKey);
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::ReverseImage(int Reset)
{
	RunFunction(L"ReverseImage", Reset);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::RotatePage(int PageRotation)
{
	RunFunction(L"RotatePage", PageRotation);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SaveFontToFile(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SaveFontToFile", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SaveImageListItemDataToFile(int ImageListID, int ImageIndex, int Options, const std::wstring& ImageFileName)
{
	BSTR bstrImageFileName = SysAllocStringLen(ImageFileName.c_str(), (int)(ImageFileName.length()));
	RunFunction(L"SaveImageListItemDataToFile", ImageListID, ImageIndex, 
	Options, bstrImageFileName);
	SysFreeString(bstrImageFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SaveImageToFile(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SaveImageToFile", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::SaveImageToVariant()
{
	RunFunction(L"SaveImageToVariant");
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::SaveState()
{
	RunFunction(L"SaveState");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SaveStyle(const std::wstring& StyleName)
{
	BSTR bstrStyleName = SysAllocStringLen(StyleName.c_str(), (int)(StyleName.length()));
	RunFunction(L"SaveStyle", bstrStyleName);
	SysFreeString(bstrStyleName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SaveToFile(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SaveToFile", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

std::vector<BYTE> DebenuPDFLibraryAX0912::SaveToVariant()
{
	RunFunction(L"SaveToVariant");
	return GetByteArray();
}

int DebenuPDFLibraryAX0912::SecurityInfo(int SecurityItem)
{
	RunFunction(L"SecurityInfo", SecurityItem);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectContentStream(int NewIndex)
{
	RunFunction(L"SelectContentStream", NewIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectDocument(int DocumentID)
{
	RunFunction(L"SelectDocument", DocumentID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectFont(int FontID)
{
	RunFunction(L"SelectFont", FontID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectImage(int ImageID)
{
	RunFunction(L"SelectImage", ImageID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectPage(int PageNumber)
{
	RunFunction(L"SelectPage", PageNumber);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectRenderer(int RendererID)
{
	RunFunction(L"SelectRenderer", RendererID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectedDocument()
{
	RunFunction(L"SelectedDocument");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectedFont()
{
	RunFunction(L"SelectedFont");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectedImage()
{
	RunFunction(L"SelectedImage");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SelectedPage()
{
	RunFunction(L"SelectedPage");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetActionURL(int ActionID, const std::wstring& NewURL)
{
	BSTR bstrNewURL = SysAllocStringLen(NewURL.c_str(), (int)(NewURL.length()));
	RunFunction(L"SetActionURL", ActionID, bstrNewURL);
	SysFreeString(bstrNewURL);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotBorderColor(int Index, double Red, double Green, double Blue)
{
	RunFunction(L"SetAnnotBorderColor", Index, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotBorderStyle(int Index, double Width, int Style, double DashOn, double DashOff)
{
	RunFunction(L"SetAnnotBorderStyle", Index, Width, Style, DashOn, DashOff);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotContents(int Index, const std::wstring& NewContents)
{
	BSTR bstrNewContents = SysAllocStringLen(NewContents.c_str(), (int)(NewContents.length()));
	RunFunction(L"SetAnnotContents", Index, bstrNewContents);
	SysFreeString(bstrNewContents);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotDblProperty(int Index, int Tag, double NewValue)
{
	RunFunction(L"SetAnnotDblProperty", Index, Tag, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotIntProperty(int Index, int Tag, int NewValue)
{
	RunFunction(L"SetAnnotIntProperty", Index, Tag, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotQuadPoints(int Index, int QuadNumber, double X1, double Y1, double X2, double Y2, double X3, double Y3, double X4, double Y4)
{
	RunFunction(L"SetAnnotQuadPoints", Index, QuadNumber, X1, Y1, X2, Y2, X3, 
	Y3, X4, Y4);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotRect(int Index, double Left, double Top, double Width, double Height)
{
	RunFunction(L"SetAnnotRect", Index, Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetAnnotStrProperty(int Index, int Tag, const std::wstring& NewValue)
{
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetAnnotStrProperty", Index, Tag, bstrNewValue);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetBaseURL(const std::wstring& NewBaseURL)
{
	BSTR bstrNewBaseURL = SysAllocStringLen(NewBaseURL.c_str(), (int)(NewBaseURL.length()));
	RunFunction(L"SetBaseURL", bstrNewBaseURL);
	SysFreeString(bstrNewBaseURL);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetBlendMode(int BlendMode)
{
	RunFunction(L"SetBlendMode", BlendMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetBreakString(const std::wstring& NewBreakString)
{
	BSTR bstrNewBreakString = SysAllocStringLen(NewBreakString.c_str(), (int)(NewBreakString.length()));
	RunFunction(L"SetBreakString", bstrNewBreakString);
	SysFreeString(bstrNewBreakString);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCSDictEPSG(int CSDictID, int NewEPSG)
{
	RunFunction(L"SetCSDictEPSG", CSDictID, NewEPSG);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCSDictType(int CSDictID, int NewDictType)
{
	RunFunction(L"SetCSDictType", CSDictID, NewDictType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCSDictWKT(int CSDictID, const std::wstring& NewWKT)
{
	BSTR bstrNewWKT = SysAllocStringLen(NewWKT.c_str(), (int)(NewWKT.length()));
	RunFunction(L"SetCSDictWKT", CSDictID, bstrNewWKT);
	SysFreeString(bstrNewWKT);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCairoFileName(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SetCairoFileName", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCapturedPageOptional(int CaptureID, int OptionalContentGroupID)
{
	RunFunction(L"SetCapturedPageOptional", CaptureID, 
	OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCapturedPageTransparencyGroup(int CaptureID, int CS, int Isolate, int Knockout)
{
	RunFunction(L"SetCapturedPageTransparencyGroup", CaptureID, CS, Isolate, 
	Knockout);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCatalogInformation(const std::wstring& Key, const std::wstring& NewValue)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetCatalogInformation", bstrKey, bstrNewValue);
	SysFreeString(bstrKey);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCharWidth(int CharCode, int NewWidth)
{
	RunFunction(L"SetCharWidth", CharCode, NewWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetClippingPath()
{
	RunFunction(L"SetClippingPath");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetClippingPathEvenOdd()
{
	RunFunction(L"SetClippingPathEvenOdd");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCompatibility(int CompatibilityItem, int CompatibilityMode)
{
	RunFunction(L"SetCompatibility", CompatibilityItem, CompatibilityMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetContentStreamFromVariant(std::vector<BYTE>& NewValue)
{
	VARIANT arNewValue = MakeByteArray(NewValue);
	RunFunction(L"SetContentStreamFromVariant", arNewValue);
	SafeArrayDestroy(arNewValue.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetContentStreamOptional(int OptionalContentGroupID)
{
	RunFunction(L"SetContentStreamOptional", OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCropBox(double Left, double Top, double Width, double Height)
{
	RunFunction(L"SetCropBox", Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCustomInformation(const std::wstring& Key, const std::wstring& NewValue)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetCustomInformation", bstrKey, bstrNewValue);
	SysFreeString(bstrKey);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetCustomLineDash(const std::wstring& DashPattern, double DashPhase)
{
	BSTR bstrDashPattern = SysAllocStringLen(DashPattern.c_str(), (int)(DashPattern.length()));
	RunFunction(L"SetCustomLineDash", bstrDashPattern, DashPhase);
	SysFreeString(bstrDashPattern);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetDestProperties(int DestID, int Zoom, int DestType, double Left, double Top, double Right, double Bottom)
{
	RunFunction(L"SetDestProperties", DestID, Zoom, DestType, Left, Top, 
	Right, Bottom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetDestValue(int DestID, int ValueKey, double NewValue)
{
	RunFunction(L"SetDestValue", DestID, ValueKey, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetDocumentMetadata(const std::wstring& XMP)
{
	BSTR bstrXMP = SysAllocStringLen(XMP.c_str(), (int)(XMP.length()));
	RunFunction(L"SetDocumentMetadata", bstrXMP);
	SysFreeString(bstrXMP);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetEmbeddedFileStrProperty(int Index, int Tag, const std::wstring& NewValue)
{
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetEmbeddedFileStrProperty", Index, Tag, bstrNewValue);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFillColor(double Red, double Green, double Blue)
{
	RunFunction(L"SetFillColor", Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFillColorCMYK(double C, double M, double Y, double K)
{
	RunFunction(L"SetFillColorCMYK", C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFillColorSep(const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetFillColorSep", bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFillShader(const std::wstring& ShaderName)
{
	BSTR bstrShaderName = SysAllocStringLen(ShaderName.c_str(), (int)(ShaderName.length()));
	RunFunction(L"SetFillShader", bstrShaderName);
	SysFreeString(bstrShaderName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFillTilingPattern(const std::wstring& PatternName)
{
	BSTR bstrPatternName = SysAllocStringLen(PatternName.c_str(), (int)(PatternName.length()));
	RunFunction(L"SetFillTilingPattern", bstrPatternName);
	SysFreeString(bstrPatternName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFindImagesMode(int NewFindImagesMode)
{
	RunFunction(L"SetFindImagesMode", NewFindImagesMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFontEncoding(int Encoding)
{
	RunFunction(L"SetFontEncoding", Encoding);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFontFlags(int Fixed, int Serif, int Symbolic, int Script, int Italic, int AllCap, int SmallCap, int ForceBold)
{
	RunFunction(L"SetFontFlags", Fixed, Serif, Symbolic, Script, Italic, 
	AllCap, SmallCap, ForceBold);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldAlignment(int Index, int Alignment)
{
	RunFunction(L"SetFormFieldAlignment", Index, Alignment);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldAnnotFlags(int Index, int NewFlags)
{
	RunFunction(L"SetFormFieldAnnotFlags", Index, NewFlags);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBackgroundColor(int Index, double Red, double Green, double Blue)
{
	RunFunction(L"SetFormFieldBackgroundColor", Index, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBackgroundColorCMYK(int Index, double C, double M, double Y, double K)
{
	RunFunction(L"SetFormFieldBackgroundColorCMYK", Index, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBackgroundColorGray(int Index, double Gray)
{
	RunFunction(L"SetFormFieldBackgroundColorGray", Index, Gray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBackgroundColorSep(int Index, const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetFormFieldBackgroundColorSep", Index, bstrColorName, 
	Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBorderColor(int Index, double Red, double Green, double Blue)
{
	RunFunction(L"SetFormFieldBorderColor", Index, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBorderColorCMYK(int Index, double C, double M, double Y, double K)
{
	RunFunction(L"SetFormFieldBorderColorCMYK", Index, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBorderColorGray(int Index, double Gray)
{
	RunFunction(L"SetFormFieldBorderColorGray", Index, Gray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBorderColorSep(int Index, const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetFormFieldBorderColorSep", Index, bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBorderStyle(int Index, double Width, int Style, double DashOn, double DashOff)
{
	RunFunction(L"SetFormFieldBorderStyle", Index, Width, Style, DashOn, 
	DashOff);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldBounds(int Index, double Left, double Top, double Width, double Height)
{
	RunFunction(L"SetFormFieldBounds", Index, Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldCalcOrder(int Index, int Order)
{
	RunFunction(L"SetFormFieldCalcOrder", Index, Order);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldCaption(int Index, const std::wstring& NewCaption)
{
	BSTR bstrNewCaption = SysAllocStringLen(NewCaption.c_str(), (int)(NewCaption.length()));
	RunFunction(L"SetFormFieldCaption", Index, bstrNewCaption);
	SysFreeString(bstrNewCaption);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldCheckStyle(int Index, int CheckStyle, int Position)
{
	RunFunction(L"SetFormFieldCheckStyle", Index, CheckStyle, Position);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldChildTitle(int Index, const std::wstring& NewTitle)
{
	BSTR bstrNewTitle = SysAllocStringLen(NewTitle.c_str(), (int)(NewTitle.length()));
	RunFunction(L"SetFormFieldChildTitle", Index, bstrNewTitle);
	SysFreeString(bstrNewTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldChoiceType(int Index, int ChoiceType)
{
	RunFunction(L"SetFormFieldChoiceType", Index, ChoiceType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldColor(int Index, double Red, double Green, double Blue)
{
	RunFunction(L"SetFormFieldColor", Index, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldColorCMYK(int Index, double C, double M, double Y, double K)
{
	RunFunction(L"SetFormFieldColorCMYK", Index, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldColorSep(int Index, const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetFormFieldColorSep", Index, bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldComb(int Index, int Comb)
{
	RunFunction(L"SetFormFieldComb", Index, Comb);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldDefaultValue(int Index, const std::wstring& NewDefaultValue)
{
	BSTR bstrNewDefaultValue = SysAllocStringLen(NewDefaultValue.c_str(), (int)(NewDefaultValue.length()));
	RunFunction(L"SetFormFieldDefaultValue", Index, bstrNewDefaultValue);
	SysFreeString(bstrNewDefaultValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldDescription(int Index, const std::wstring& NewDescription)
{
	BSTR bstrNewDescription = SysAllocStringLen(NewDescription.c_str(), (int)(NewDescription.length()));
	RunFunction(L"SetFormFieldDescription", Index, bstrNewDescription);
	SysFreeString(bstrNewDescription);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldFlags(int Index, int NewFlags)
{
	RunFunction(L"SetFormFieldFlags", Index, NewFlags);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldFont(int Index, int FontIndex)
{
	RunFunction(L"SetFormFieldFont", Index, FontIndex);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldHighlightMode(int Index, int NewMode)
{
	RunFunction(L"SetFormFieldHighlightMode", Index, NewMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldIcon(int Index, int IconType, int CaptureID)
{
	RunFunction(L"SetFormFieldIcon", Index, IconType, CaptureID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldIconStyle(int Index, int Placement, int Scale, int ScaleType, int HorizontalShift, int VerticalShift)
{
	RunFunction(L"SetFormFieldIconStyle", Index, Placement, Scale, ScaleType, 
	HorizontalShift, VerticalShift);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldMaxLen(int Index, int NewMaxLen)
{
	RunFunction(L"SetFormFieldMaxLen", Index, NewMaxLen);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldNoExport(int Index, int NoExport)
{
	RunFunction(L"SetFormFieldNoExport", Index, NoExport);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldOptional(int Index, int OptionalContentGroupID)
{
	RunFunction(L"SetFormFieldOptional", Index, OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldPage(int Index, int NewPage)
{
	RunFunction(L"SetFormFieldPage", Index, NewPage);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldPrintable(int Index, int Printable)
{
	RunFunction(L"SetFormFieldPrintable", Index, Printable);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldReadOnly(int Index, int ReadOnly)
{
	RunFunction(L"SetFormFieldReadOnly", Index, ReadOnly);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldRequired(int Index, int Required)
{
	RunFunction(L"SetFormFieldRequired", Index, Required);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldRotation(int Index, int Angle)
{
	RunFunction(L"SetFormFieldRotation", Index, Angle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldStandardFont(int Index, int StandardFontID)
{
	RunFunction(L"SetFormFieldStandardFont", Index, StandardFontID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldSubmitAction(int Index, const std::wstring& ActionType, const std::wstring& Link)
{
	BSTR bstrActionType = SysAllocStringLen(ActionType.c_str(), (int)(ActionType.length()));
	BSTR bstrLink = SysAllocStringLen(Link.c_str(), (int)(Link.length()));
	RunFunction(L"SetFormFieldSubmitAction", Index, bstrActionType, bstrLink);
	SysFreeString(bstrActionType);
	SysFreeString(bstrLink);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldTabOrder(int Index, int Order)
{
	RunFunction(L"SetFormFieldTabOrder", Index, Order);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldTextFlags(int Index, int Multiline, int Password, int FileSelect, int DoNotSpellCheck, int DoNotScroll)
{
	RunFunction(L"SetFormFieldTextFlags", Index, Multiline, Password, 
	FileSelect, DoNotSpellCheck, DoNotScroll);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldTextSize(int Index, double NewTextSize)
{
	RunFunction(L"SetFormFieldTextSize", Index, NewTextSize);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldValue(int Index, const std::wstring& NewValue)
{
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetFormFieldValue", Index, bstrNewValue);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldValueByTitle(const std::wstring& Title, const std::wstring& NewValue)
{
	BSTR bstrTitle = SysAllocStringLen(Title.c_str(), (int)(Title.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetFormFieldValueByTitle", bstrTitle, bstrNewValue);
	SysFreeString(bstrTitle);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetFormFieldVisible(int Index, int Visible)
{
	RunFunction(L"SetFormFieldVisible", Index, Visible);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetGDIPlusFileName(const std::wstring& DLLFileName)
{
	BSTR bstrDLLFileName = SysAllocStringLen(DLLFileName.c_str(), (int)(DLLFileName.length()));
	RunFunction(L"SetGDIPlusFileName", bstrDLLFileName);
	SysFreeString(bstrDLLFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetGDIPlusOptions(int OptionID, int NewValue)
{
	RunFunction(L"SetGDIPlusOptions", OptionID, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetHTMLBoldFont(const std::wstring& FontSet, int FontID)
{
	BSTR bstrFontSet = SysAllocStringLen(FontSet.c_str(), (int)(FontSet.length()));
	RunFunction(L"SetHTMLBoldFont", bstrFontSet, FontID);
	SysFreeString(bstrFontSet);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetHTMLBoldItalicFont(const std::wstring& FontSet, int FontID)
{
	BSTR bstrFontSet = SysAllocStringLen(FontSet.c_str(), (int)(FontSet.length()));
	RunFunction(L"SetHTMLBoldItalicFont", bstrFontSet, FontID);
	SysFreeString(bstrFontSet);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetHTMLItalicFont(const std::wstring& FontSet, int FontID)
{
	BSTR bstrFontSet = SysAllocStringLen(FontSet.c_str(), (int)(FontSet.length()));
	RunFunction(L"SetHTMLItalicFont", bstrFontSet, FontID);
	SysFreeString(bstrFontSet);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetHTMLNormalFont(const std::wstring& FontSet, int FontID)
{
	BSTR bstrFontSet = SysAllocStringLen(FontSet.c_str(), (int)(FontSet.length()));
	RunFunction(L"SetHTMLNormalFont", bstrFontSet, FontID);
	SysFreeString(bstrFontSet);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageAsMask(int MaskType)
{
	RunFunction(L"SetImageAsMask", MaskType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageMask(double FromRed, double FromGreen, double FromBlue, double ToRed, double ToGreen, double ToBlue)
{
	RunFunction(L"SetImageMask", FromRed, FromGreen, FromBlue, ToRed, 
	ToGreen, ToBlue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageMaskCMYK(double FromC, double FromM, double FromY, double FromK, double ToC, double ToM, double ToY, double ToK)
{
	RunFunction(L"SetImageMaskCMYK", FromC, FromM, FromY, FromK, ToC, ToM, 
	ToY, ToK);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageMaskFromImage(int ImageID)
{
	RunFunction(L"SetImageMaskFromImage", ImageID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageOptional(int OptionalContentGroupID)
{
	RunFunction(L"SetImageOptional", OptionalContentGroupID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetImageResolution(int Horizontal, int Vertical, int Units)
{
	RunFunction(L"SetImageResolution", Horizontal, Vertical, Units);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetInformation(int Key, const std::wstring& NewValue)
{
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetInformation", Key, bstrNewValue);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetJPEGQuality(int Quality)
{
	RunFunction(L"SetJPEGQuality", Quality);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetJavaScriptMode(int JSMode)
{
	RunFunction(L"SetJavaScriptMode", JSMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetKerning(const std::wstring& CharPair, int Adjustment)
{
	BSTR bstrCharPair = SysAllocStringLen(CharPair.c_str(), (int)(CharPair.length()));
	RunFunction(L"SetKerning", bstrCharPair, Adjustment);
	SysFreeString(bstrCharPair);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineCap(int LineCap)
{
	RunFunction(L"SetLineCap", LineCap);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineColor(double Red, double Green, double Blue)
{
	RunFunction(L"SetLineColor", Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineColorCMYK(double C, double M, double Y, double K)
{
	RunFunction(L"SetLineColorCMYK", C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineColorSep(const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetLineColorSep", bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineDash(double DashOn, double DashOff)
{
	RunFunction(L"SetLineDash", DashOn, DashOff);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineDashEx(const std::wstring& DashValues)
{
	BSTR bstrDashValues = SysAllocStringLen(DashValues.c_str(), (int)(DashValues.length()));
	RunFunction(L"SetLineDashEx", bstrDashValues);
	SysFreeString(bstrDashValues);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineJoin(int LineJoin)
{
	RunFunction(L"SetLineJoin", LineJoin);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineShader(const std::wstring& ShaderName)
{
	BSTR bstrShaderName = SysAllocStringLen(ShaderName.c_str(), (int)(ShaderName.length()));
	RunFunction(L"SetLineShader", bstrShaderName);
	SysFreeString(bstrShaderName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetLineWidth(double LineWidth)
{
	RunFunction(L"SetLineWidth", LineWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMarkupAnnotStyle(int Index, double Red, double Green, double Blue, double Transparency)
{
	RunFunction(L"SetMarkupAnnotStyle", Index, Red, Green, Blue, 
	Transparency);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictBoundsCount(int MeasureDictID, int NewCount)
{
	RunFunction(L"SetMeasureDictBoundsCount", MeasureDictID, NewCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictBoundsItem(int MeasureDictID, int ItemIndex, double NewValue)
{
	RunFunction(L"SetMeasureDictBoundsItem", MeasureDictID, ItemIndex, 
	NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictCoordinateSystem(int MeasureDictID, int CoordinateSystemID)
{
	RunFunction(L"SetMeasureDictCoordinateSystem", MeasureDictID, 
	CoordinateSystemID);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictGPTSCount(int MeasureDictID, int NewCount)
{
	RunFunction(L"SetMeasureDictGPTSCount", MeasureDictID, NewCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictGPTSItem(int MeasureDictID, int ItemIndex, double NewValue)
{
	RunFunction(L"SetMeasureDictGPTSItem", MeasureDictID, ItemIndex, 
	NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictLPTSCount(int MeasureDictID, int NewCount)
{
	RunFunction(L"SetMeasureDictLPTSCount", MeasureDictID, NewCount);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictLPTSItem(int MeasureDictID, int ItemIndex, double NewValue)
{
	RunFunction(L"SetMeasureDictLPTSItem", MeasureDictID, ItemIndex, 
	NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasureDictPDU(int MeasureDictID, int LinearUnit, int AreaUnit, int AngularUnit)
{
	RunFunction(L"SetMeasureDictPDU", MeasureDictID, LinearUnit, AreaUnit, 
	AngularUnit);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetMeasurementUnits(int MeasurementUnits)
{
	RunFunction(L"SetMeasurementUnits", MeasurementUnits);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetNeedAppearances(int NewValue)
{
	RunFunction(L"SetNeedAppearances", NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetObjectFromVariant(int ObjectNumber, std::vector<BYTE>& NewValue)
{
	VARIANT arNewValue = MakeByteArray(NewValue);
	RunFunction(L"SetObjectFromVariant", ObjectNumber, arNewValue);
	SafeArrayDestroy(arNewValue.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOpenActionDestination(int OpenPage, int Zoom)
{
	RunFunction(L"SetOpenActionDestination", OpenPage, Zoom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOpenActionDestinationFull(int OpenPage, int Zoom, int DestType, double Left, double Top, double Right, double Bottom)
{
	RunFunction(L"SetOpenActionDestinationFull", OpenPage, Zoom, DestType, 
	Left, Top, Right, Bottom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOpenActionJavaScript(const std::wstring& JavaScript)
{
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"SetOpenActionJavaScript", bstrJavaScript);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOpenActionMenu(const std::wstring& MenuItem)
{
	BSTR bstrMenuItem = SysAllocStringLen(MenuItem.c_str(), (int)(MenuItem.length()));
	RunFunction(L"SetOpenActionMenu", bstrMenuItem);
	SysFreeString(bstrMenuItem);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOptionalContentConfigLocked(int OptionalContentConfigID, int OptionalContentGroupID, int NewLocked)
{
	RunFunction(L"SetOptionalContentConfigLocked", OptionalContentConfigID, 
	OptionalContentGroupID, NewLocked);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOptionalContentConfigState(int OptionalContentConfigID, int OptionalContentGroupID, int NewState)
{
	RunFunction(L"SetOptionalContentConfigState", OptionalContentConfigID, 
	OptionalContentGroupID, NewState);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOptionalContentGroupName(int OptionalContentGroupID, const std::wstring& NewGroupName)
{
	BSTR bstrNewGroupName = SysAllocStringLen(NewGroupName.c_str(), (int)(NewGroupName.length()));
	RunFunction(L"SetOptionalContentGroupName", OptionalContentGroupID, 
	bstrNewGroupName);
	SysFreeString(bstrNewGroupName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOptionalContentGroupPrintable(int OptionalContentGroupID, int Printable)
{
	RunFunction(L"SetOptionalContentGroupPrintable", OptionalContentGroupID, 
	Printable);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOptionalContentGroupVisible(int OptionalContentGroupID, int Visible)
{
	RunFunction(L"SetOptionalContentGroupVisible", OptionalContentGroupID, 
	Visible);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOrigin(int Origin)
{
	RunFunction(L"SetOrigin", Origin);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineColor(int OutlineID, double Red, double Green, double Blue)
{
	RunFunction(L"SetOutlineColor", OutlineID, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineDestination(int OutlineID, int DestPage, double DestPosition)
{
	RunFunction(L"SetOutlineDestination", OutlineID, DestPage, DestPosition);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineDestinationFull(int OutlineID, int DestPage, int Zoom, int DestType, double Left, double Top, double Right, double Bottom)
{
	RunFunction(L"SetOutlineDestinationFull", OutlineID, DestPage, Zoom, 
	DestType, Left, Top, Right, Bottom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineDestinationZoom(int OutlineID, int DestPage, double DestPosition, int Zoom)
{
	RunFunction(L"SetOutlineDestinationZoom", OutlineID, DestPage, 
	DestPosition, Zoom);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineJavaScript(int OutlineID, const std::wstring& JavaScript)
{
	BSTR bstrJavaScript = SysAllocStringLen(JavaScript.c_str(), (int)(JavaScript.length()));
	RunFunction(L"SetOutlineJavaScript", OutlineID, bstrJavaScript);
	SysFreeString(bstrJavaScript);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineNamedDestination(int OutlineID, const std::wstring& DestName)
{
	BSTR bstrDestName = SysAllocStringLen(DestName.c_str(), (int)(DestName.length()));
	RunFunction(L"SetOutlineNamedDestination", OutlineID, bstrDestName);
	SysFreeString(bstrDestName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineOpenFile(int OutlineID, const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SetOutlineOpenFile", OutlineID, bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineRemoteDestination(int OutlineID, const std::wstring& FileName, int OpenPage, int Zoom, int DestType, double PntLeft, double PntTop, double PntRight, double PntBottom, int NewWindow)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SetOutlineRemoteDestination", OutlineID, bstrFileName, 
	OpenPage, Zoom, DestType, PntLeft, PntTop, PntRight, PntBottom, 
	NewWindow);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineStyle(int OutlineID, int SetItalic, int SetBold)
{
	RunFunction(L"SetOutlineStyle", OutlineID, SetItalic, SetBold);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineTitle(int OutlineID, const std::wstring& NewTitle)
{
	BSTR bstrNewTitle = SysAllocStringLen(NewTitle.c_str(), (int)(NewTitle.length()));
	RunFunction(L"SetOutlineTitle", OutlineID, bstrNewTitle);
	SysFreeString(bstrNewTitle);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOutlineWebLink(int OutlineID, const std::wstring& Link)
{
	BSTR bstrLink = SysAllocStringLen(Link.c_str(), (int)(Link.length()));
	RunFunction(L"SetOutlineWebLink", OutlineID, bstrLink);
	SysFreeString(bstrLink);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetOverprint(int StrokingOverprint, int OtherOverprint, int OverprintMode)
{
	RunFunction(L"SetOverprint", StrokingOverprint, OtherOverprint, 
	OverprintMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPDFAMode(int NewMode)
{
	RunFunction(L"SetPDFAMode", NewMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPNGTransparencyColor(int RedByte, int GreenByte, int BlueByte)
{
	RunFunction(L"SetPNGTransparencyColor", RedByte, GreenByte, BlueByte);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageActionMenu(const std::wstring& MenuItem)
{
	BSTR bstrMenuItem = SysAllocStringLen(MenuItem.c_str(), (int)(MenuItem.length()));
	RunFunction(L"SetPageActionMenu", bstrMenuItem);
	SysFreeString(bstrMenuItem);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageBox(int BoxType, double Left, double Top, double Width, double Height)
{
	RunFunction(L"SetPageBox", BoxType, Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageContentFromVariant(std::vector<BYTE>& NewValue)
{
	VARIANT arNewValue = MakeByteArray(NewValue);
	RunFunction(L"SetPageContentFromVariant", arNewValue);
	SafeArrayDestroy(arNewValue.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageDimensions(double NewPageWidth, double NewPageHeight)
{
	RunFunction(L"SetPageDimensions", NewPageWidth, NewPageHeight);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageLayout(int NewPageLayout)
{
	RunFunction(L"SetPageLayout", NewPageLayout);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageMode(int NewPageMode)
{
	RunFunction(L"SetPageMode", NewPageMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageSize(const std::wstring& PaperName)
{
	BSTR bstrPaperName = SysAllocStringLen(PaperName.c_str(), (int)(PaperName.length()));
	RunFunction(L"SetPageSize", bstrPaperName);
	SysFreeString(bstrPaperName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageThumbnail()
{
	RunFunction(L"SetPageThumbnail");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPageTransparencyGroup(int CS, int Isolate, int Knockout)
{
	RunFunction(L"SetPageTransparencyGroup", CS, Isolate, Knockout);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPrecision(int NewPrecision)
{
	RunFunction(L"SetPrecision", NewPrecision);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetPrinterDevModeFromVariant(std::vector<BYTE>& Source)
{
	VARIANT arSource = MakeByteArray(Source);
	RunFunction(L"SetPrinterDevModeFromVariant", arSource);
	SafeArrayDestroy(arSource.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetRenderCropType(int NewCropType)
{
	RunFunction(L"SetRenderCropType", NewCropType);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetRenderDCErasePage(int NewErasePage)
{
	RunFunction(L"SetRenderDCErasePage", NewErasePage);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetRenderDCOffset(int NewOffsetX, int NewOffsetY)
{
	RunFunction(L"SetRenderDCOffset", NewOffsetX, NewOffsetY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetRenderScale(double NewScale)
{
	RunFunction(L"SetRenderScale", NewScale);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetScale(double NewScale)
{
	RunFunction(L"SetScale", NewScale);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableBorderColor(int TableID, int BorderIndex, double Red, double Green, double Blue)
{
	RunFunction(L"SetTableBorderColor", TableID, BorderIndex, Red, Green, 
	Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableBorderColorCMYK(int TableID, int BorderIndex, double C, double M, double Y, double K)
{
	RunFunction(L"SetTableBorderColorCMYK", TableID, BorderIndex, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableBorderWidth(int TableID, int BorderIndex, double NewWidth)
{
	RunFunction(L"SetTableBorderWidth", TableID, BorderIndex, NewWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellAlignment(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, int NewCellAlignment)
{
	RunFunction(L"SetTableCellAlignment", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, NewCellAlignment);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellBackgroundColor(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, double Red, double Green, double Blue)
{
	RunFunction(L"SetTableCellBackgroundColor", TableID, FirstRow, 
	FirstColumn, LastRow, LastColumn, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellBackgroundColorCMYK(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, double C, double M, double Y, double K)
{
	RunFunction(L"SetTableCellBackgroundColorCMYK", TableID, FirstRow, 
	FirstColumn, LastRow, LastColumn, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellBorderColor(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, int BorderIndex, double Red, double Green, double Blue)
{
	RunFunction(L"SetTableCellBorderColor", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, BorderIndex, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellBorderColorCMYK(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, int BorderIndex, double C, double M, double Y, double K)
{
	RunFunction(L"SetTableCellBorderColorCMYK", TableID, FirstRow, 
	FirstColumn, LastRow, LastColumn, BorderIndex, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellBorderWidth(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, int BorderIndex, double NewWidth)
{
	RunFunction(L"SetTableCellBorderWidth", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, BorderIndex, NewWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellContent(int TableID, int RowNumber, int ColumnNumber, const std::wstring& HTMLText)
{
	BSTR bstrHTMLText = SysAllocStringLen(HTMLText.c_str(), (int)(HTMLText.length()));
	RunFunction(L"SetTableCellContent", TableID, RowNumber, ColumnNumber, 
	bstrHTMLText);
	SysFreeString(bstrHTMLText);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellPadding(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, int BorderIndex, double NewPadding)
{
	RunFunction(L"SetTableCellPadding", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, BorderIndex, NewPadding);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellTextColor(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, double Red, double Green, double Blue)
{
	RunFunction(L"SetTableCellTextColor", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellTextColorCMYK(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, double C, double M, double Y, double K)
{
	RunFunction(L"SetTableCellTextColorCMYK", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableCellTextSize(int TableID, int FirstRow, int FirstColumn, int LastRow, int LastColumn, double NewTextSize)
{
	RunFunction(L"SetTableCellTextSize", TableID, FirstRow, FirstColumn, 
	LastRow, LastColumn, NewTextSize);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableColumnWidth(int TableID, int FirstColumn, int LastColumn, double NewWidth)
{
	RunFunction(L"SetTableColumnWidth", TableID, FirstColumn, LastColumn, 
	NewWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableRowHeight(int TableID, int FirstRow, int LastRow, double NewHeight)
{
	RunFunction(L"SetTableRowHeight", TableID, FirstRow, LastRow, NewHeight);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableThinBorders(int TableID, int ThinBorders, double Red, double Green, double Blue)
{
	RunFunction(L"SetTableThinBorders", TableID, ThinBorders, Red, Green, 
	Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTableThinBordersCMYK(int TableID, int ThinBorders, double C, double M, double Y, double K)
{
	RunFunction(L"SetTableThinBordersCMYK", TableID, ThinBorders, C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTempFile(const std::wstring& FileName)
{
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"SetTempFile", bstrFileName);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTempPath(const std::wstring& NewPath)
{
	BSTR bstrNewPath = SysAllocStringLen(NewPath.c_str(), (int)(NewPath.length()));
	RunFunction(L"SetTempPath", bstrNewPath);
	SysFreeString(bstrNewPath);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextAlign(int TextAlign)
{
	RunFunction(L"SetTextAlign", TextAlign);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextCharSpacing(double CharSpacing)
{
	RunFunction(L"SetTextCharSpacing", CharSpacing);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextColor(double Red, double Green, double Blue)
{
	RunFunction(L"SetTextColor", Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextColorCMYK(double C, double M, double Y, double K)
{
	RunFunction(L"SetTextColorCMYK", C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextColorSep(const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetTextColorSep", bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextExtractionArea(double Left, double Top, double Width, double Height)
{
	RunFunction(L"SetTextExtractionArea", Left, Top, Width, Height);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextExtractionOptions(int OptionID, int NewValue)
{
	RunFunction(L"SetTextExtractionOptions", OptionID, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextExtractionScaling(int Options, double Horizontal, double Vertical)
{
	RunFunction(L"SetTextExtractionScaling", Options, Horizontal, Vertical);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextExtractionWordGap(double NewWordGap)
{
	RunFunction(L"SetTextExtractionWordGap", NewWordGap);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextHighlight(int Highlight)
{
	RunFunction(L"SetTextHighlight", Highlight);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextHighlightColor(double Red, double Green, double Blue)
{
	RunFunction(L"SetTextHighlightColor", Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextHighlightColorCMYK(double C, double M, double Y, double K)
{
	RunFunction(L"SetTextHighlightColorCMYK", C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextHighlightColorSep(const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetTextHighlightColorSep", bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextMode(int TextMode)
{
	RunFunction(L"SetTextMode", TextMode);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextRise(double Rise)
{
	RunFunction(L"SetTextRise", Rise);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextScaling(double ScalePercentage)
{
	RunFunction(L"SetTextScaling", ScalePercentage);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextShader(const std::wstring& ShaderName)
{
	BSTR bstrShaderName = SysAllocStringLen(ShaderName.c_str(), (int)(ShaderName.length()));
	RunFunction(L"SetTextShader", bstrShaderName);
	SysFreeString(bstrShaderName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextSize(double TextSize)
{
	RunFunction(L"SetTextSize", TextSize);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextSpacing(double Spacing)
{
	RunFunction(L"SetTextSpacing", Spacing);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderline(int Underline)
{
	RunFunction(L"SetTextUnderline", Underline);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineColor(double Red, double Green, double Blue)
{
	RunFunction(L"SetTextUnderlineColor", Red, Green, Blue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineColorCMYK(double C, double M, double Y, double K)
{
	RunFunction(L"SetTextUnderlineColorCMYK", C, M, Y, K);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineColorSep(const std::wstring& ColorName, double Tint)
{
	BSTR bstrColorName = SysAllocStringLen(ColorName.c_str(), (int)(ColorName.length()));
	RunFunction(L"SetTextUnderlineColorSep", bstrColorName, Tint);
	SysFreeString(bstrColorName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineCustomDash(const std::wstring& DashPattern, double DashPhase)
{
	BSTR bstrDashPattern = SysAllocStringLen(DashPattern.c_str(), (int)(DashPattern.length()));
	RunFunction(L"SetTextUnderlineCustomDash", bstrDashPattern, DashPhase);
	SysFreeString(bstrDashPattern);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineDash(double DashOn, double DashOff)
{
	RunFunction(L"SetTextUnderlineDash", DashOn, DashOff);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineDistance(double UnderlineDistance)
{
	RunFunction(L"SetTextUnderlineDistance", UnderlineDistance);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextUnderlineWidth(double UnderlineWidth)
{
	RunFunction(L"SetTextUnderlineWidth", UnderlineWidth);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTextWordSpacing(double WordSpacing)
{
	RunFunction(L"SetTextWordSpacing", WordSpacing);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetTransparency(int Transparency)
{
	RunFunction(L"SetTransparency", Transparency);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetViewerPreferences(int Option, int NewValue)
{
	RunFunction(L"SetViewerPreferences", Option, NewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFormFieldAccess(const std::wstring& XFAFieldName, int NewAccess)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	RunFunction(L"SetXFAFormFieldAccess", bstrXFAFieldName, NewAccess);
	SysFreeString(bstrXFAFieldName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFormFieldBorderColor(const std::wstring& XFAFieldName, double Red, double Green, double Blue)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	RunFunction(L"SetXFAFormFieldBorderColor", bstrXFAFieldName, Red, Green, 
	Blue);
	SysFreeString(bstrXFAFieldName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFormFieldBorderPresence(const std::wstring& XFAFieldName, int NewPresence)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	RunFunction(L"SetXFAFormFieldBorderPresence", bstrXFAFieldName, 
	NewPresence);
	SysFreeString(bstrXFAFieldName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFormFieldBorderWidth(const std::wstring& XFAFieldName, double BorderWidth)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	RunFunction(L"SetXFAFormFieldBorderWidth", bstrXFAFieldName, BorderWidth);
	SysFreeString(bstrXFAFieldName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFormFieldValue(const std::wstring& XFAFieldName, const std::wstring& NewValue)
{
	BSTR bstrXFAFieldName = SysAllocStringLen(XFAFieldName.c_str(), (int)(XFAFieldName.length()));
	BSTR bstrNewValue = SysAllocStringLen(NewValue.c_str(), (int)(NewValue.length()));
	RunFunction(L"SetXFAFormFieldValue", bstrXFAFieldName, bstrNewValue);
	SysFreeString(bstrXFAFieldName);
	SysFreeString(bstrNewValue);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetXFAFromString(const std::wstring& Source, int Options)
{
	BSTR bstrSource = SysAllocStringLen(Source.c_str(), (int)(Source.length()));
	RunFunction(L"SetXFAFromString", bstrSource, Options);
	SysFreeString(bstrSource);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SetupCustomPrinter(const std::wstring& CustomPrinterName, int Setting, int NewValue)
{
	BSTR bstrCustomPrinterName = SysAllocStringLen(CustomPrinterName.c_str(), (int)(CustomPrinterName.length()));
	RunFunction(L"SetupCustomPrinter", bstrCustomPrinterName, Setting, 
	NewValue);
	SysFreeString(bstrCustomPrinterName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SignFile(const std::wstring& InputFileName, const std::wstring& OpenPassword, const std::wstring& SignatureFieldName, const std::wstring& OutputFileName, const std::wstring& PFXFileName, const std::wstring& PFXPassword, const std::wstring& Reason, const std::wstring& Location, const std::wstring& ContactInfo)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrOpenPassword = SysAllocStringLen(OpenPassword.c_str(), (int)(OpenPassword.length()));
	BSTR bstrSignatureFieldName = SysAllocStringLen(SignatureFieldName.c_str(), (int)(SignatureFieldName.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	BSTR bstrPFXFileName = SysAllocStringLen(PFXFileName.c_str(), (int)(PFXFileName.length()));
	BSTR bstrPFXPassword = SysAllocStringLen(PFXPassword.c_str(), (int)(PFXPassword.length()));
	BSTR bstrReason = SysAllocStringLen(Reason.c_str(), (int)(Reason.length()));
	BSTR bstrLocation = SysAllocStringLen(Location.c_str(), (int)(Location.length()));
	BSTR bstrContactInfo = SysAllocStringLen(ContactInfo.c_str(), (int)(ContactInfo.length()));
	RunFunction(L"SignFile", bstrInputFileName, bstrOpenPassword, 
	bstrSignatureFieldName, bstrOutputFileName, bstrPFXFileName, bstrPFXPassword, 
	bstrReason, bstrLocation, bstrContactInfo);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrOpenPassword);
	SysFreeString(bstrSignatureFieldName);
	SysFreeString(bstrOutputFileName);
	SysFreeString(bstrPFXFileName);
	SysFreeString(bstrPFXPassword);
	SysFreeString(bstrReason);
	SysFreeString(bstrLocation);
	SysFreeString(bstrContactInfo);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::SplitPageText(int Options)
{
	RunFunction(L"SplitPageText", Options);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::StartPath(double StartX, double StartY)
{
	RunFunction(L"StartPath", StartX, StartY);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::StoreCustomDataFromFile(const std::wstring& Key, const std::wstring& FileName, int Location, int Options)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	BSTR bstrFileName = SysAllocStringLen(FileName.c_str(), (int)(FileName.length()));
	RunFunction(L"StoreCustomDataFromFile", bstrKey, bstrFileName, Location, 
	Options);
	SysFreeString(bstrKey);
	SysFreeString(bstrFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::StoreCustomDataFromVariant(const std::wstring& Key, std::vector<BYTE>& NewValue, int Location, int Options)
{
	BSTR bstrKey = SysAllocStringLen(Key.c_str(), (int)(Key.length()));
	VARIANT arNewValue = MakeByteArray(NewValue);
	RunFunction(L"StoreCustomDataFromVariant", bstrKey, arNewValue, Location, 
	Options);
	SysFreeString(bstrKey);
	SafeArrayDestroy(arNewValue.parray);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::TestTempPath()
{
	RunFunction(L"TestTempPath");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::TransformFile(const std::wstring& InputFileName, const std::wstring& Password, const std::wstring& OutputFileName, int TransformType, int Options)
{
	BSTR bstrInputFileName = SysAllocStringLen(InputFileName.c_str(), (int)(InputFileName.length()));
	BSTR bstrPassword = SysAllocStringLen(Password.c_str(), (int)(Password.length()));
	BSTR bstrOutputFileName = SysAllocStringLen(OutputFileName.c_str(), (int)(OutputFileName.length()));
	RunFunction(L"TransformFile", bstrInputFileName, bstrPassword, 
	bstrOutputFileName, TransformType, Options);
	SysFreeString(bstrInputFileName);
	SysFreeString(bstrPassword);
	SysFreeString(bstrOutputFileName);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::UnlockKey(const std::wstring& LicenseKey)
{
	BSTR bstrLicenseKey = SysAllocStringLen(LicenseKey.c_str(), (int)(LicenseKey.length()));
	RunFunction(L"UnlockKey", bstrLicenseKey);
	SysFreeString(bstrLicenseKey);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::Unlocked()
{
	RunFunction(L"Unlocked");
	return result.intVal;
}

int DebenuPDFLibraryAX0912::UpdateAndFlattenFormField(int Index)
{
	RunFunction(L"UpdateAndFlattenFormField", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::UpdateAppearanceStream(int Index)
{
	RunFunction(L"UpdateAppearanceStream", Index);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::UseKerning(int Kern)
{
	RunFunction(L"UseKerning", Kern);
	return result.intVal;
}

int DebenuPDFLibraryAX0912::UseUnsafeContentStreams(int SafetyLevel)
{
	RunFunction(L"UseUnsafeContentStreams", SafetyLevel);
	return result.intVal;
}

